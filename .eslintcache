[{"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/index.js":"1","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/App.js":"2","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/reportWebVitals.js":"3","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/index.js":"4","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Signup.js":"5","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/index.js":"6","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/NavbarElements.js":"7","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Login.js":"8","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUpload.js":"9","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configComp.js":"10","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DisplayResult.js":"11","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/index.js":"12","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/LoggedInNavElements.js":"13","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUploadTrial.js":"14","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configCompTrial.js":"15","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/test.js":"16","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/UserMenu.js":"17","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DataSelected.js":"18","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/AboutPage.js":"19"},{"size":603,"mtime":1610229682898,"results":"20","hashOfConfig":"21"},{"size":3374,"mtime":1610512112165,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1609529741104,"results":"23","hashOfConfig":"21"},{"size":276,"mtime":1610235532813,"results":"24","hashOfConfig":"21"},{"size":2753,"mtime":1610235785346,"results":"25","hashOfConfig":"21"},{"size":926,"mtime":1610246515132,"results":"26","hashOfConfig":"21"},{"size":1584,"mtime":1609653585246,"results":"27","hashOfConfig":"21"},{"size":2624,"mtime":1610254251683,"results":"28","hashOfConfig":"21"},{"size":1129,"mtime":1610568880814,"results":"29","hashOfConfig":"21"},{"size":10222,"mtime":1610569920738,"results":"30","hashOfConfig":"21"},{"size":685,"mtime":1610252511170,"results":"31","hashOfConfig":"21"},{"size":572,"mtime":1610342513620,"results":"32","hashOfConfig":"21"},{"size":1584,"mtime":1610231702343,"results":"33","hashOfConfig":"21"},{"size":1146,"mtime":1610255927983,"results":"34","hashOfConfig":"21"},{"size":9069,"mtime":1610569907636,"results":"35","hashOfConfig":"21"},{"size":164,"mtime":1610249144927,"results":"36","hashOfConfig":"21"},{"size":2716,"mtime":1610569333457,"results":"37","hashOfConfig":"21"},{"size":3010,"mtime":1610569741706,"results":"38","hashOfConfig":"21"},{"size":3695,"mtime":1610518088119,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"mhr0t5",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/index.js",[],["88","89"],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/App.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/reportWebVitals.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/index.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Signup.js",["90"],"import React, { Component } from 'react';\nimport './Signup.css' ;\nimport axios from 'axios';\n\nexport default class Signup extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            SignedUp: false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    myChangeHandlerUsername = (event) => {\n        this.setState({username: event.target.value});\n    }\n\n    myChangeHandlerPassword = (event) => {\n        this.setState({password: event.target.value});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault()\n        const formData = new FormData()\n        formData.append(\"username\", this.state.username);\n        formData.append(\"password\", this.state.password);\n        const jsonSignUp = {\n            \"username\": this.state.username,\n            \"password\": this.state.password,\n        };\n        const signed = await this.sendreq(formData)\n        if (signed === 'success'){\n            this.setState((state) => {\n                return {SignedUp: true};\n            });\n        }\n        else{\n            this.setState((state) => {\n                return {SignedUp: false};\n            });\n        }\n    }\n\n    async sendreq(jsonSignUp){\n        const {data: response} = await axios.post('http://127.0.0.1:5000/newUser', jsonSignUp)\n        return response;\n    }\n\n\n    render(){\n        if (this.state.SignedUp === false){\n            return (\n                <form onSubmit = {this.handleSubmit} className='form'>\n                        <h3>Sign Up</h3>\n\n                        <div className=\"form-group\">\n                            <label>Username</label>\n                            <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerUsername} placeholder=\"Username\" />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label>Password</label>\n                            <input type=\"password\" className=\"form-control\" onChange = {this.myChangeHandlerPassword} placeholder=\"Enter password\" />\n                        </div>\n\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n                        <p className=\"forgot-password text-right\">\n                            Already registered? <a href=\"/Login\">Log In</a>\n                        </p>\n                    </form>\n            );\n            }\n            else{\n                return (\n                <div>\n                    <h1>Welcome, {this.state.username}</h1>\n                    <a href=\"/Login\">Click here to Log In!</a>\n                </div>\n                );\n            }\n        }\n    \n}","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/index.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/NavbarElements.js",[],["91","92"],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Login.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUpload.js",["93"],"import axios from 'axios';\nimport React from 'react';\nimport {useForm} from 'react-hook-form';\nimport './FileUpload.css'\n\n\nconst formStyle = {\n    position: 'absolute',\n    top: '150px',\n    left: '450px'\n};\n\nconst headerStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '435px'\n}\n\nconst FileUpload = (props) => {\n\n    const {register, handleSubmit} = useForm()\n\n    const onSubmit = (data) => {\n        //const formData = new FormData()\n        props.fData.append(\"file\", data.csv[0]);\n        props.history.push('/config');\n        // axios.post('http://127.0.0.1:5000/sendCSV', formData, {\n        //     headers: {\n        //         \"Authorization\": props.token\n        //     }\n        // }).then(res => console.log(res)).catch(err => console.warn(err))\n    }\n\n    return (\n        <div>\n            <h2 style={headerStyle}>Please upload your csv file here!</h2>\n            <form onSubmit={handleSubmit(onSubmit)} style={formStyle}>\n                <input ref={register} type=\"file\" name=\"csv\" />\n                <button>Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default FileUpload;","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configComp.js",["94","95","96"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport yaml from 'js-yaml';\nimport YAML from 'yaml';\nimport download from 'downloadjs';\nimport './configComp.css';\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport { css } from \"@emotion/core\";\nimport { CsvToHtmlTable } from 'react-csv-to-table';\nimport styled from \"styled-components\";\nimport Button from 'react-bootstrap/Button';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  position: relative;\n  top: 100px;\n`;\n\nconst loadTextStyle={\n    position: 'relative',\n    top: \"100px\",\n    left: \"475px\",\n    //font: \"100000px\"\n};\n\nconst loadTextStyle2={\n    position: 'relative',\n    top: \"150px\",\n    left: \"45px\",\n    //font: \"100000px\"\n};\n\nconst downloadButtonStyle={\n    position: 'relative',\n    top: \"200px\",\n    left: \"-295px\",\n    //font: \"100000px\"\n};\n\nconst initialState = {\n    input_name: 'input.csv',\n    output_name: 'result',\n    time_format_type: 'index',\n    horizon: +3,\n    backtest: '',\n    eval_metric: 'wape',\n    display_metric: '',\n    use_gpu: 'no',\n    threads: 0,\n    algorithm: '',\n    save_data: ''\n};\n\n\nexport default class configComp extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            input_name: 'input.csv',\n            output_name: 'result',\n            time_format_type: 'index',\n            horizon: +3,\n            backtest: '',\n            eval_metric: 'wape',\n            display_metric: '',\n            use_gpu: 'no',\n            threads: 0,\n            algorithm: '',\n            save_data: '',\n\n            //not relating to form\n            submitted:'',\n\n            response:false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    updateOnRes = (res) => {\n        let csvData = res.data\n        //const newCSV = d3.csv(csvData, function(csvData) { console.log(csvData); });\n        //let newCSV = csvToJson.getJsonFromCsv(csvData)\n        //console.log(newCSV)\n        //this.props.res_result=csvData;\n        //console.log(this.props.res_result)\n        this.setState({response: csvData})\n        //console.log(this.state.response)\n        this.props.fData.delete(\"file\")\n        this.props.fData.delete(\"file2\")\n        this.setState(initialState)\n        //download(this.state.response, 'result.csv', 'csv')\n        //console.log(this.state.respose)\n       //this.props.history.push('/displayResult');\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault()\n        //parse the YAML file\n        const object = {\n            input_name: this.state.input_name,\n            output_name: this.state.output_name,\n            time_format_type: this.state.time_format_type,\n            forecast: {\n                horizon: parseInt(this.state.horizon)\n            },\n            backtest: {\n                evaluation_metric: this.state.eval_metric\n            },\n            hardware: {\n                use_gpu: this.state.use_gpu,\n                threads: this.state.threads\n            }\n        }\n\n        if (this.state.save_data!=='') object[\"save_data\"] = this.state.save_data\n        if (this.state.algorithm!=='') object['algorithms'] = this.state.algorithm\n        if (this.state.backtest !== '') object['backtest']['backtest_start_time'] = parseInt(this.state.backtest)\n        if (this.state.display_metric !== '') object['backtest']['display_metric'] = this.state.display_metric\n        if (this.state.threads !== '') object['hardware']['threads'] = parseInt(this.state.threads)\n        console.log(object)\n\n        //const yamlObject = yaml.dump(object, {'sortKeys': false});\n        const yamlObject = new YAML.Document()\n        yamlObject.contents = object\n        console.log(object);\n\n        this.props.fData.append(\"file2\", yamlObject);\n        //console.log(this.props.fData)\n\n        this.setState({submitted: true});\n\n        //console.log(this.state.submitted)\n\n        //make request\n        axios.post('http://127.0.0.1:5000/sendCSV', this.props.fData, {\n            headers: {\n                \"Authorization\": this.props.token\n            }\n        })\n        //.then(res => download(res.data, 'result.csv', 'csv'))\n        .then(res => {\n            //this.props.res_result=res;\n            //this.props.history.push('/displayResult');\n            this.updateOnRes(res);\n            //this.props.res_result=res.data\n        })\n        .catch(err => console.warn(err))\n\n    }\n\n    clickDownload = () => {\n        download(this.state.response, 'result.csv', 'csv')\n    }\n\n    myChangeHandlerSaveData = (event) => {\n        this.setState({save_data: event.target.value});\n    }\n\n    myChangeHandlerAlgorithm = (event) => {\n        this.setState({algorithm: event.target.value});\n    }\n\n    myChangeHandlerInputName = (event) => {\n        this.setState({input_name: event.target.value});\n    }\n\n    myChangeHandlerOutputName = (event) => {\n        this.setState({output_name: event.target.value});\n    }\n\n    myChangeHandlerTimeFormat = (event) => {\n        this.setState({time_format_type: event.target.value});\n    }\n\n    myChangeHandlerHorizon = (event) => {\n        this.setState({horizon: event.target.value});\n    }\n\n    myChangeHandlerBacktest = (event) => {\n        this.setState({backtest: event.target.value});\n    }\n\n    myChangeHandlerEvaluation = (event) => {\n        this.setState({eval_metric: event.target.value});\n    }\n\n    myChangeHandlerDisplay = (event) => {\n        this.setState({display_metric: event.target.value});\n    }\n\n    myChangeHandlerGPU = (event) => {\n        this.setState({use_gpu: event.target.value});\n    }\n\n    myChangeHandlerThreads = (event) => {\n        this.setState({threads: event.target.value});\n    }\n\n    render() {\n        if (this.state.submitted!==true && this.state.response===false){\n            return (\n                <form onSubmit={this.handleSubmit} className=\"form\">\n                    <h3>Configs (all are optional)</h3>\n\n                    <div className=\"form-group\">\n                        <label> Would you like to save this dataset? (yes/no)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerSaveData} placeholder=\"default: no\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label> Select Algorithm (automl, nbeats, arima)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerAlgorithm} placeholder=\"default: automl\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Input Name</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerInputName} placeholder=\"default: input.csv\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Output Name</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerOutputName} placeholder=\"default: result.csv\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Time Format Type (standard or index)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerTimeFormat} placeholder=\"default: index\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Forecast Horizon (+ horizon desired)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerHorizon} placeholder=\"default: +3\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Backtest Start Time (- desired backtest start)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerBacktest} placeholder=\"default: last 10% of data\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Evaluation Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerEvaluation} placeholder=\"default: wape\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Display Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerDisplay} placeholder=\"Other metrics to show\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Use GPU? (yes/no)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerGPU} placeholder=\"default: no\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Threads to Use</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerThreads} placeholder=\"default: 0\" />\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n\n                </form>\n            );\n        }\n        else if (this.state.response===false && this.state.submitted===true){\n            return (\n                //<Spinner animation=\"border\" />\n                <div>\n                    <ClimbingBoxLoader color={'#36D7B7'} loading={true} css={override} size={15} />\n                    <strong style={loadTextStyle}>Please wait, as we generate your forecast!</strong>\n                </div>\n            );\n        }\n        else if (this.state.response!==false){\n            return (\n                <>\n                    <strong style={loadTextStyle}>Your results are ready!</strong>\n                    <strong style={loadTextStyle2}>Click to download your .csv file with your results</strong>\n                    <Button variant=\"outline-primary\" style={downloadButtonStyle} size='lg' onClick={this.clickDownload}>Download</Button>{' '}\n                </>\n            );\n        }\n    }\n\n};\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DisplayResult.js",["97"],"import React, {Component} from 'react' ;\nimport { CsvToHtmlTable } from 'react-csv-to-table';\n\nexport default class DisplayResult extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            yes: ''\n        };\n\n        //this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.props.test}</h1>\n                <h1>{this.props.res_result}</h1>\n            </div>\n        );\n    }\n\n}\n\n//<CsvToHtmlTable \n  //              data = {this.props.res_result}\n    //            csvDelimiter=\",\"\n      //          tableClassName=\"table table-striped table-hover\"\n        //    />","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/index.js",["98"],"import React from 'react'\nimport {Nav, NavLink, Bars, NavMenu, NavBtn, NavBtnLink} from './LoggedInNavElements';\n\n\nconst NavbarLoggedIn = (props) => {\n    return (\n        <>\n            <Nav>\n                <NavLink to=\"/userMenu\">\n                    <h1>TS API</h1>\n                </NavLink>\n                <Bars/>\n                <NavBtn onClick={props.logOut}>\n                    <NavBtnLink to=\"/\">\n                        Log Out\n                    </NavBtnLink>\n                </NavBtn>\n            </Nav>\n        </>\n    )\n}\n\nexport default NavbarLoggedIn;\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/LoggedInNavElements.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUploadTrial.js",["99"],"import axios from 'axios';\nimport React from 'react';\nimport {useForm} from 'react-hook-form';\nimport './FileUploadTrial.css'\n\nconst formStyle = {\n    position: 'absolute',\n    top: '150px',\n    left: '450px'\n};\n\nconst headerStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '435px'\n}\n\nconst FileUploadTrial = (props) => {\n\n    const {register, handleSubmit} = useForm()\n\n    const onSubmit = (data) => {\n        //const formData = new FormData()\n        props.fData.append(\"file\", data.csv[0]);\n        props.history.push('/trialForm');\n        // axios.post('http://127.0.0.1:5000/sendCSV', formData, {\n        //     headers: {\n        //         \"Authorization\": props.token\n        //     }\n        // }).then(res => console.log(res)).catch(err => console.warn(err))\n    }\n\n    return (\n        <div>\n            <h2 style={headerStyle}>Please upload your csv file here!</h2>\n            <form onSubmit={handleSubmit(onSubmit)} style={formStyle}>\n                <input ref={register} type=\"file\" name=\"csv\" />\n                <button>Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default FileUploadTrial;","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configCompTrial.js",["100","101","102"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport yaml from 'js-yaml';\nimport YAML from 'yaml';\nimport download from 'downloadjs';\nimport './configCompTrial.css';\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport { css } from \"@emotion/core\";\nimport { CsvToHtmlTable } from 'react-csv-to-table';\nimport styled from \"styled-components\";\nimport Button from 'react-bootstrap/Button';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  position: relative;\n  top: 100px;\n`;\n\nconst loadTextStyle={\n    position: 'relative',\n    top: \"100px\",\n    left: \"475px\",\n    //font: \"100000px\"\n};\n\nconst loadTextStyle2={\n    position: 'relative',\n    top: \"150px\",\n    left: \"45px\",\n    //font: \"100000px\"\n};\n\nconst downloadButtonStyle={\n    position: 'relative',\n    top: \"200px\",\n    left: \"-295px\",\n    //font: \"100000px\"\n};\n\nconst initialState = {\n    input_name: 'input.csv',\n    output_name: 'result',\n    time_format_type: 'index',\n    horizon: +3,\n    backtest: '',\n    eval_metric: 'wape',\n    display_metric: '',\n    use_gpu: 'no',\n    threads: 0,\n    algorithm: '',\n};\n\n\nexport default class ConfigCompTrial extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            input_name: 'input.csv',\n            output_name: 'result',\n            time_format_type: 'index',\n            horizon: +3,\n            backtest: '',\n            eval_metric: 'wape',\n            display_metric: '',\n            use_gpu: 'no',\n            threads: 0,\n            algorithm: '',\n\n            //not relating to form\n            submitted:'',\n\n            response:false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    updateOnRes = (res) => {\n        let csvData = res.data\n        //const newCSV = d3.csv(csvData, function(csvData) { console.log(csvData); });\n        //let newCSV = csvToJson.getJsonFromCsv(csvData)\n        //console.log(newCSV)\n        //this.props.res_result=csvData;\n        //console.log(this.props.res_result)\n        this.setState({response: csvData})\n        this.props.fData.delete('file')\n        this.props.fData.delete('file2')\n        this.setState(initialState)\n        //download(this.state.response, 'result.csv', 'csv')\n        //console.log(this.state.respose)\n       //this.props.history.push('/displayResult');\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault()\n        //parse the YAML file\n        const object = {\n            input_name: this.state.input_name,\n            output_name: this.state.output_name,\n            time_format_type: this.state.time_format_type,\n            forecast: {\n                horizon: parseInt(this.state.horizon)\n            },\n            backtest: {\n                evaluation_metric: this.state.eval_metric\n            },\n            hardware: {\n                use_gpu: this.state.use_gpu,\n                threads: this.state.threads\n            }\n        }\n\n        if (this.state.algorithm!=='') object['algorithms'] = this.state.algorithm\n        if (this.state.backtest !== '') object['backtest']['backtest_start_time'] = parseInt(this.state.backtest)\n        if (this.state.display_metric !== '') object['backtest']['display_metric'] = this.state.display_metric\n        if (this.state.threads !== '') object['hardware']['threads'] = parseInt(this.state.threads)\n\n        //const yamlObject = yaml.dump(object, {'sortKeys': false});\n        const yamlObject = new YAML.Document()\n        yamlObject.contents = object\n        console.log(yamlObject);\n\n        this.props.fData.append(\"file2\", yamlObject);\n        console.log(this.props.fData)\n\n        this.setState({submitted: true});\n\n        console.log(this.state.submitted)\n\n        //make request\n        axios.post('http://127.0.0.1:5000/sendCSV', this.props.fData, {\n            headers: {\n                \"Authorization\": \"trial\"\n            }\n        })\n        //.then(res => download(res.data, 'result.csv', 'csv'))\n        .then(res => {\n            //this.props.res_result=res;\n            //this.props.history.push('/displayResult');\n            this.updateOnRes(res);\n            //this.props.res_result=res.data\n        })\n        .catch(err => console.warn(err))\n\n    }\n\n    clickDownload = () => {\n        download(this.state.response, 'result.csv', 'csv')\n    }\n\n    myChangeHandlerAlgorithm = (event) => {\n        this.setState({algorithm: event.target.value});\n    }\n\n    myChangeHandlerInputName = (event) => {\n        this.setState({input_name: event.target.value});\n    }\n\n    myChangeHandlerOutputName = (event) => {\n        this.setState({output_name: event.target.value});\n    }\n\n    myChangeHandlerTimeFormat = (event) => {\n        this.setState({time_format_type: event.target.value});\n    }\n\n    myChangeHandlerHorizon = (event) => {\n        this.setState({horizon: event.target.value});\n    }\n\n    myChangeHandlerBacktest = (event) => {\n        this.setState({backtest: event.target.value});\n    }\n\n    myChangeHandlerEvaluation = (event) => {\n        this.setState({eval_metric: event.target.value});\n    }\n\n    myChangeHandlerDisplay = (event) => {\n        this.setState({display_metric: event.target.value});\n    }\n\n    myChangeHandlerGPU = (event) => {\n        this.setState({use_gpu: event.target.value});\n    }\n\n    myChangeHandlerThreads = (event) => {\n        this.setState({threads: event.target.value});\n    }\n\n    render() {\n        if (this.state.submitted!==true && this.state.response===false){\n            return (\n                <form onSubmit={this.handleSubmit} className=\"form\">\n                    <h3>Configs (all are optional)</h3>\n\n\n                    <div className=\"form-group\">\n                        <label> Select Algorithm (automl, nbeats, arima)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerAlgorithm} placeholder=\"default: automl\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Input Name</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerInputName} placeholder=\"default: input.csv\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Output Name</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerOutputName} placeholder=\"output name...\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Time Format Type (standard or index)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerTimeFormat} placeholder=\"default: index\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Forecast Horizon (+ horizon desired)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerHorizon} placeholder=\"default: +3\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Backtest Start Time (- desired backtest start)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerBacktest} placeholder=\"default: last 10% of data\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Evaluation Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerEvaluation} placeholder=\"default: wape\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Display Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerDisplay} placeholder=\"default: none\" />\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n\n                </form>\n            );\n        }\n        else if (this.state.response===false && this.state.submitted===true){\n            return (\n                //<Spinner animation=\"border\" />\n                <div>\n                    <ClimbingBoxLoader color={'#36D7B7'} loading={true} css={override} size={15} />\n                    <strong style={loadTextStyle}>Please wait, as we generate your forecast!</strong>\n                </div>\n            );\n        }\n        else if (this.state.response!==false){\n            return (\n                <>\n                    <strong style={loadTextStyle}>Your results are ready!</strong>\n                    <strong style={loadTextStyle2}>Click to download your .csv file with your results</strong>\n                    <Button variant=\"outline-primary\" style={downloadButtonStyle} size='lg' onClick={this.clickDownload}>Download</Button>{' '}\n                </>\n            );\n        }\n    }\n\n};\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/test.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/UserMenu.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DataSelected.js",["103"],"import React, { Component, useState } from 'react';\nimport {useForm} from 'react-hook-form';\nimport axios from 'axios';\nimport { css } from \"@emotion/core\";\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport download from 'downloadjs';\nimport Button from 'react-bootstrap/Button';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  position: relative;\n  top: 100px;\n`;\n\nconst loadTextStyle={\n    position: 'relative',\n    top: \"100px\",\n    left: \"550px\",\n    //font: \"100000px\"\n};\n\nconst loadTextStyle2={\n    position: 'relative',\n    top: \"150px\",\n    left: \"125px\",\n    //font: \"100000px\"\n};\n\nconst downloadButtonStyle={\n    position: 'relative',\n    top: \"200px\",\n    left: \"-225px\",\n    //font: \"100000px\"\n};\n\nconst formStyle = {\n    position: 'absolute',\n    top: '250px',\n    left: '450px'\n};\n\nconst headerStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '40px'\n}\n\nconst DataSelected = (props) => {\n\n    const {register, handleSubmit} = useForm()\n\n    const [submitted,updateSubmitted]=useState(false);\n    const [responseGot, updateGot]=useState(false)\n\n    const afterResponse = (res) => {\n        updateGot(res.data);\n        props.fData.delete(\"file\");\n    }\n\n    const onSubmit = (data) => {\n        //const formData = new FormData()\n        updateSubmitted(!submitted);\n        props.fData.append(\"file\", data.csv[0]);\n        axios.post('http://127.0.0.1:5000/updateAndPredict', props.fData, {\n            headers: {\n                \"Authorization\": props.token,\n                \"data_id\": props.data_id\n            }\n        })\n        .then(res => {\n            afterResponse(res)\n        })\n        .catch(err => console.warn(err))\n    }\n\n    const clickDownload = () => {\n        download(responseGot, 'result.csv', 'csv')\n    }\n\n    if (submitted===false){\n        return (\n            <div>\n                <h2 style={headerStyle}>Please upload the new data you would like to append to this dataset to get newer forecasts</h2>\n                <form onSubmit={handleSubmit(onSubmit)} style={formStyle}>\n                    <input ref={register} type=\"file\" name=\"csv\" />\n                    <button>Submit</button>\n                </form>\n            </div>\n        );\n    }\n    else if (submitted===true && responseGot===false){\n        return (\n            <div>\n                <ClimbingBoxLoader color={'#36D7B7'} loading={true} css={override} size={15} />\n                <strong style={loadTextStyle}>Please wait, as we generate your forecast!</strong>\n            </div>\n        );\n    }\n    else{\n        return (\n            <>\n                <strong style={loadTextStyle}>Your results are ready!</strong>\n                <strong style={loadTextStyle2}>Click to download your .csv file with your results</strong>\n                <Button variant=\"outline-primary\" style={downloadButtonStyle} size='lg' onClick={clickDownload}>Download</Button>{' '}\n            </>\n        );\n    }\n\n\n}\n\nexport default DataSelected;","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/AboutPage.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":31,"column":15,"nodeType":"110","messageId":"111","endLine":31,"endColumn":25},{"ruleId":"104","replacedBy":"112"},{"ruleId":"106","replacedBy":"113"},{"ruleId":"108","severity":1,"message":"114","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"115","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":12},{"ruleId":"108","severity":1,"message":"116","line":9,"column":10,"nodeType":"110","messageId":"111","endLine":9,"endColumn":24},{"ruleId":"108","severity":1,"message":"117","line":10,"column":8,"nodeType":"110","messageId":"111","endLine":10,"endColumn":14},{"ruleId":"108","severity":1,"message":"116","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":24},{"ruleId":"108","severity":1,"message":"118","line":2,"column":29,"nodeType":"110","messageId":"111","endLine":2,"endColumn":36},{"ruleId":"108","severity":1,"message":"114","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"115","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":12},{"ruleId":"108","severity":1,"message":"116","line":9,"column":10,"nodeType":"110","messageId":"111","endLine":9,"endColumn":24},{"ruleId":"108","severity":1,"message":"117","line":10,"column":8,"nodeType":"110","messageId":"111","endLine":10,"endColumn":14},{"ruleId":"108","severity":1,"message":"119","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":26},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'jsonSignUp' is assigned a value but never used.","Identifier","unusedVar",["120"],["121"],"'axios' is defined but never used.","'yaml' is defined but never used.","'CsvToHtmlTable' is defined but never used.","'styled' is defined but never used.","'NavMenu' is defined but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]