[{"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/index.js":"1","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/App.js":"2","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/reportWebVitals.js":"3","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/index.js":"4","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Signup.js":"5","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/index.js":"6","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/NavbarElements.js":"7","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Login.js":"8","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUpload.js":"9","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configComp.js":"10","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DisplayResult.js":"11","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/index.js":"12","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/LoggedInNavElements.js":"13","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUploadTrial.js":"14","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configCompTrial.js":"15","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/test.js":"16","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/UserMenu.js":"17","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DataSelected.js":"18","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/AboutPage.js":"19"},{"size":603,"mtime":1610229682898,"results":"20","hashOfConfig":"21"},{"size":3374,"mtime":1610512112165,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1609529741104,"results":"23","hashOfConfig":"21"},{"size":835,"mtime":1611569795301,"results":"24","hashOfConfig":"21"},{"size":3672,"mtime":1611570301537,"results":"25","hashOfConfig":"21"},{"size":961,"mtime":1611571879233,"results":"26","hashOfConfig":"21"},{"size":1589,"mtime":1611602101685,"results":"27","hashOfConfig":"21"},{"size":3431,"mtime":1611569548593,"results":"28","hashOfConfig":"21"},{"size":1692,"mtime":1611569261856,"results":"29","hashOfConfig":"21"},{"size":11983,"mtime":1611569596287,"results":"30","hashOfConfig":"21"},{"size":685,"mtime":1610252511170,"results":"31","hashOfConfig":"21"},{"size":607,"mtime":1611571117348,"results":"32","hashOfConfig":"21"},{"size":1587,"mtime":1611571765008,"results":"33","hashOfConfig":"21"},{"size":2939,"mtime":1611569206032,"results":"34","hashOfConfig":"21"},{"size":10581,"mtime":1611570003748,"results":"35","hashOfConfig":"21"},{"size":164,"mtime":1610249144927,"results":"36","hashOfConfig":"21"},{"size":3257,"mtime":1611570800301,"results":"37","hashOfConfig":"21"},{"size":3010,"mtime":1610569741706,"results":"38","hashOfConfig":"21"},{"size":4033,"mtime":1611572013012,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"mhr0t5",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"42"},"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/index.js",[],["91","92"],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/App.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/reportWebVitals.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/index.js",["93","94"],"import React from 'react'\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\n//<div style={{width: \"100%\", height: \"0\", paddingNottom: \"100%\", position: \"relative\"}}><iframe src=\"https://giphy.com/embed/8gNQZ9IpkcdiAjfOgN\" width=\"100%\" height=\"100%\" style={{position:\"absolute\"}} frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe></div><p><a href=\"https://giphy.com/gifs/illustration-marketing-data-8gNQZ9IpkcdiAjfOgN\">via GIPHY</a></p>\n\nconst Home = (props) => {\n    return (\n        <div>\n        <GlobalStyle/>\n        \n        </div>\n    )\n}\n\nexport default Home\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Signup.js",["95","96","97"],"import React, { Component } from 'react';\nimport './Signup.css' ;\nimport axios from 'axios';\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst signInStyle = {\n    position: 'absolute',\n    left: '450px',\n    top: '150px'\n}\n\n//#3A3A3C\n//#242424\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nexport default class Signup extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            SignedUp: false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    myChangeHandlerUsername = (event) => {\n        this.setState({username: event.target.value});\n    }\n\n    myChangeHandlerPassword = (event) => {\n        this.setState({password: event.target.value});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault()\n        const formData = new FormData()\n        formData.append(\"username\", this.state.username);\n        formData.append(\"password\", this.state.password);\n        const jsonSignUp = {\n            \"username\": this.state.username,\n            \"password\": this.state.password,\n        };\n        const signed = await this.sendreq(formData)\n        if (signed === 'success'){\n            this.setState((state) => {\n                return {SignedUp: true};\n            });\n        }\n        else{\n            this.setState((state) => {\n                return {SignedUp: false};\n            });\n        }\n    }\n\n    async sendreq(jsonSignUp){\n        const {data: response} = await axios.post('http://127.0.0.1:5000/newUser', jsonSignUp)\n        return response;\n    }\n\n\n    render(){\n        if (this.state.SignedUp === false){\n            return (\n                <div>\n                <GlobalStyle/>\n                <form style = {signInStyle} onSubmit = {this.handleSubmit} className='form'>\n                        <h3 style={{color: \"#26688E\"}}>Sign Up</h3>\n\n                        <div className=\"form-group\">\n                            <label style={{color: \"#26688E\"}}>Username</label>\n                            <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerUsername} placeholder=\"Username\" />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label style={{color: \"#26688E\"}}>Password</label>\n                            <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"password\" className=\"form-control\" onChange = {this.myChangeHandlerPassword} placeholder=\"Enter password\" />\n                        </div>\n\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\" style={{backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Sign Up</button>\n                        <p className=\"forgot-password text-right\">\n                            Already registered? <a style={{color: \"#26688E\"}} href=\"/Login\">Log In</a>\n                        </p>\n                    </form>\n                    </div>\n            );\n            }\n            else{\n                return (\n                <div>\n                    <GlobalStyle/>\n                    <h1 style={{color: \"#36D7B7\"}}>Welcome, {this.state.username}</h1>\n                    <a style={{color: \"#26688E\"}} href=\"/Login\">Click here to Log In!</a>\n                </div>\n                );\n            }\n        }\n}","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/index.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/NavbarElements.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Login.js",["98","99"],"import React, {Component} from 'react' ;\nimport axios from 'axios';\nimport './Login.css'\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nconst logInStyle = {\n    position: 'absolute',\n    left: '450px',\n    top: '150px'\n}\n\nexport default class Login extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            LoggedIn: false,\n            username: '',\n            password: '',\n            first: false,\n            token: ''\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    myChangeHandlerUserName = (event) => {\n        this.setState({username: event.target.value});\n    }\n\n    myChangeHandlerPassword = (event) => {\n        this.setState({password: event.target.value});\n    }\n\n\n\n    //login click method\n    async handleSubmit(event) {\n        event.preventDefault()\n        const loginForm = new FormData()\n        loginForm.append(\"username\", this.state.username);\n        loginForm.append(\"password\", this.state.password);\n        //const jsonLogin = {\"email\": this.state.username, \"password\": this.state.password};\n        const response = await this.sendreq(loginForm)\n        console.log(response)\n        if (response !== 'Login Unsuccessful'){\n            this.props.toggleLoggedIn()\n            this.props.setToken(response.token)\n            this.props.setUserName(this.state.username)\n            this.props.history.push('/userMenu')\n        }\n    }\n\n    //sends login get request\n    async sendreq(jsonLogin) {\n        const {data: response} = await axios.post('http://127.0.0.1:5000/Login',  jsonLogin);\n        return response\n    }\n\n\n\n    render() {\n        if (this.props.isLoggedIn === false) {\n            return (\n                <div>\n                <GlobalStyle/>\n                <form style={logInStyle} onSubmit = {this.handleSubmit} className = 'form'>\n                    <h3 style={{color: \"#26688E\"}}>Log In</h3>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#26688E\"}}>Username</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerUserName} placeholder=\"Enter username\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#26688E\"}}>Password</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"password\" className=\"form-control\" onChange = {this.myChangeHandlerPassword} placeholder=\"Enter password\" />\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\" style={{backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Log In</button>\n                    <p className=\"forgot-password text-right\">\n                            Forgot <a style={{color: \"#26688E\"}} href=\"/\">password?</a>\n                    </p>\n                </form>\n                </div>\n            );\n        }\n        else {\n            return(\n                <h1>Hello</h1>\n            );\n        }\n    }\n\n    \n}","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUpload.js",["100","101","102"],"import axios from 'axios';\nimport React from 'react';\nimport {useForm} from 'react-hook-form';\nimport './FileUpload.css'\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\n\nconst formStyle = {\n    position: 'absolute',\n    top: '150px',\n    left: '450px'\n};\n\nconst headerStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '435px',\n    color: \"#26688E\"\n}\n\nconst FileUpload = (props) => {\n\n    const {register, handleSubmit} = useForm()\n\n    const onSubmit = (data) => {\n        //const formData = new FormData()\n        props.fData.append(\"file\", data.csv[0]);\n        props.history.push('/config');\n        // axios.post('http://127.0.0.1:5000/sendCSV', formData, {\n        //     headers: {\n        //         \"Authorization\": props.token\n        //     }\n        // }).then(res => console.log(res)).catch(err => console.warn(err))\n    }\n\n    return (\n        <div>\n            <GlobalStyle/>\n            <h2 style={headerStyle}>Please upload your csv file here!</h2>\n            <form onSubmit={handleSubmit(onSubmit)} style={formStyle} className='form'>\n                <input style={{color: \"#26688E\"}} ref={register} type=\"file\" name=\"csv\" />\n                <button className=\"btn btn-primary btn-block\" style={{margin: '10px', position: 'relative', left: '0px', top: '20px', backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default FileUpload;","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configComp.js",["103","104","105"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport yaml from 'js-yaml';\nimport YAML from 'yaml';\nimport download from 'downloadjs';\nimport './configComp.css';\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport { css } from \"@emotion/core\";\nimport { CsvToHtmlTable } from 'react-csv-to-table';\nimport Button from 'react-bootstrap/Button';\nimport styled, {createGlobalStyle} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  position: relative;\n  top: 100px;\n`;\n\nconst configFormStyle = {\n    position: 'absolute',\n    left: '400px',\n    top: '100px'\n};\n\nconst loadTextStyle={\n    position: 'relative',\n    top: \"100px\",\n    left: \"445px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst loadTextStyle2={\n    position: 'relative',\n    top: \"150px\",\n    left: \"40px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst downloadButtonStyle={\n    position: 'relative',\n    top: \"200px\",\n    left: \"-295px\",\n    //font: \"100000px\"\n};\n\nconst initialState = {\n    input_name: 'input.csv',\n    output_name: 'result',\n    time_format_type: 'index',\n    horizon: +3,\n    backtest: '',\n    eval_metric: 'wape',\n    display_metric: '',\n    use_gpu: 'no',\n    threads: 0,\n    algorithm: '',\n    save_data: ''\n};\n\n\nexport default class configComp extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            input_name: 'input.csv',\n            output_name: 'result',\n            time_format_type: 'index',\n            horizon: +3,\n            backtest: '',\n            eval_metric: 'wape',\n            display_metric: '',\n            use_gpu: 'no',\n            threads: 0,\n            algorithm: '',\n            save_data: '',\n\n            //not relating to form\n            submitted:'',\n\n            response:false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    updateOnRes = (res) => {\n        let csvData = res.data\n        //const newCSV = d3.csv(csvData, function(csvData) { console.log(csvData); });\n        //let newCSV = csvToJson.getJsonFromCsv(csvData)\n        //console.log(newCSV)\n        //this.props.res_result=csvData;\n        //console.log(this.props.res_result)\n        this.setState({response: csvData})\n        //console.log(this.state.response)\n        this.props.fData.delete(\"file\")\n        this.props.fData.delete(\"file2\")\n        this.setState(initialState)\n        //download(this.state.response, 'result.csv', 'csv')\n        //console.log(this.state.respose)\n       //this.props.history.push('/displayResult');\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault()\n        //parse the YAML file\n        const object = {\n            input_name: this.state.input_name,\n            output_name: this.state.output_name,\n            time_format_type: this.state.time_format_type,\n            forecast: {\n                horizon: parseInt(this.state.horizon)\n            },\n            backtest: {\n                evaluation_metric: this.state.eval_metric\n            },\n            hardware: {\n                use_gpu: this.state.use_gpu,\n                threads: this.state.threads\n            }\n        }\n\n        if (this.state.save_data!=='') object[\"save_data\"] = this.state.save_data\n        if (this.state.algorithm!=='') object['algorithms'] = this.state.algorithm\n        if (this.state.backtest !== '') object['backtest']['backtest_start_time'] = parseInt(this.state.backtest)\n        if (this.state.display_metric !== '') object['backtest']['display_metric'] = this.state.display_metric\n        if (this.state.threads !== '') object['hardware']['threads'] = parseInt(this.state.threads)\n        console.log(object)\n\n        //const yamlObject = yaml.dump(object, {'sortKeys': false});\n        const yamlObject = new YAML.Document()\n        yamlObject.contents = object\n        console.log(object);\n\n        this.props.fData.append(\"file2\", yamlObject);\n        //console.log(this.props.fData)\n\n        this.setState({submitted: true});\n\n        //console.log(this.state.submitted)\n\n        //make request\n        axios.post('http://127.0.0.1:5000/sendCSV', this.props.fData, {\n            headers: {\n                \"Authorization\": this.props.token\n            }\n        })\n        //.then(res => download(res.data, 'result.csv', 'csv'))\n        .then(res => {\n            //this.props.res_result=res;\n            //this.props.history.push('/displayResult');\n            this.updateOnRes(res);\n            //this.props.res_result=res.data\n        })\n        .catch(err => console.warn(err))\n\n    }\n\n    clickDownload = () => {\n        download(this.state.response, 'result.csv', 'csv')\n    }\n\n    myChangeHandlerSaveData = (event) => {\n        this.setState({save_data: event.target.value});\n    }\n\n    myChangeHandlerAlgorithm = (event) => {\n        this.setState({algorithm: event.target.value});\n    }\n\n    myChangeHandlerInputName = (event) => {\n        this.setState({input_name: event.target.value});\n    }\n\n    myChangeHandlerOutputName = (event) => {\n        this.setState({output_name: event.target.value});\n    }\n\n    myChangeHandlerTimeFormat = (event) => {\n        this.setState({time_format_type: event.target.value});\n    }\n\n    myChangeHandlerHorizon = (event) => {\n        this.setState({horizon: event.target.value});\n    }\n\n    myChangeHandlerBacktest = (event) => {\n        this.setState({backtest: event.target.value});\n    }\n\n    myChangeHandlerEvaluation = (event) => {\n        this.setState({eval_metric: event.target.value});\n    }\n\n    myChangeHandlerDisplay = (event) => {\n        this.setState({display_metric: event.target.value});\n    }\n\n    myChangeHandlerGPU = (event) => {\n        this.setState({use_gpu: event.target.value});\n    }\n\n    myChangeHandlerThreads = (event) => {\n        this.setState({threads: event.target.value});\n    }\n\n    render() {\n        if (this.state.submitted!==true && this.state.response===false){\n            return (\n                <div>\n                <GlobalStyle/>\n                <form style={configFormStyle} onSubmit={this.handleSubmit} className=\"form\">\n                    <h3 style={{color: \"#26688E\"}}>Configs (all are optional)</h3>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}> Would you like to save this dataset? (yes/no)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerSaveData} placeholder=\"default: no\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}> Select Algorithm (automl, nbeats, arima)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerAlgorithm} placeholder=\"default: automl\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#fff\"}}>Input Name</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerInputName} placeholder=\"default: input.csv\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#fff\"}}>Output Name</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerOutputName} placeholder=\"default: result.csv\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#fff\"}}>Time Format Type (standard or index)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerTimeFormat} placeholder=\"default: index\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#26688E\"}}>Forecast Horizon (+ horizon desired)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerHorizon} placeholder=\"default: +3\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#26688E\"}}>Backtest Start Time (- desired backtest start)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerBacktest} placeholder=\"default: last 10% of data\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Evaluation Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerEvaluation} placeholder=\"default: wape\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Display Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerDisplay} placeholder=\"Other metrics to show\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#fff\"}}>Use GPU? (yes/no)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerGPU} placeholder=\"default: no\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#fff\"}}>Threads to Use</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerThreads} placeholder=\"default: 0\" />\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\" style={{backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Submit</button>\n\n                </form>\n                </div>\n            );\n        }\n        else if (this.state.response===false && this.state.submitted===true){\n            return (\n                //<Spinner animation=\"border\" />\n                <div>\n                    <GlobalStyle/>\n                    <ClimbingBoxLoader color={'#36D7B7'} loading={true} css={override} size={15} />\n                    <strong style={loadTextStyle}>Please wait, as we generate your forecast!</strong>\n                </div>\n            );\n        }\n        else if (this.state.response!==false){\n            return (\n                <>\n                    <GlobalStyle/>\n                    <strong style={loadTextStyle}>Your results are ready!</strong>\n                    <strong style={loadTextStyle2}>Click to download your .csv file with your results</strong>\n                    <Button variant=\"outline-primary\" style={downloadButtonStyle} size='lg' onClick={this.clickDownload}>Download</Button>{' '}\n                </>\n            );\n        }\n    }\n\n};\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DisplayResult.js",["106"],"import React, {Component} from 'react' ;\nimport { CsvToHtmlTable } from 'react-csv-to-table';\n\nexport default class DisplayResult extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            yes: ''\n        };\n\n        //this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.props.test}</h1>\n                <h1>{this.props.res_result}</h1>\n            </div>\n        );\n    }\n\n}\n\n//<CsvToHtmlTable \n  //              data = {this.props.res_result}\n    //            csvDelimiter=\",\"\n      //          tableClassName=\"table table-striped table-hover\"\n        //    />","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/index.js",["107"],"import React from 'react'\nimport {Nav, NavLink, Bars, NavMenu, NavBtn, NavBtnLink} from './LoggedInNavElements';\n\n\nconst NavbarLoggedIn = (props) => {\n    return (\n        <>\n            <Nav>\n                <NavLink style={{color: \"#26688E\"}} to=\"/userMenu\">\n                    <h1>Forecast A(P)I</h1>\n                </NavLink>\n                <Bars/>\n                <NavBtn onClick={props.logOut}>\n                    <NavBtnLink to=\"/\">\n                        Log Out\n                    </NavBtnLink>\n                </NavBtn>\n            </Nav>\n        </>\n    )\n}\n\nexport default NavbarLoggedIn;\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/LoggedInNavElements.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUploadTrial.js",["108","109","110","111","112","113","114","115","116","117"],"import axios from 'axios';\nimport React from 'react';\nimport {useForm} from 'react-hook-form';\nimport './FileUploadTrial.css'\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\n\nconst sharedStyle = css`\n    background-color: #eee;\n    height: 40px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    margin: 10px 0 20px 0;\n    padding: 20px;\n    box-sizing: border-box;\n`;\n\nconst StyledFormrapper = styled.form`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 850px;\n    padding: 0 20px;\n\n`;\n\nconst StyledForm = styled.form`\n    width: 100%;\n    max-width: 700px;\n    padding: 50px;\n    background-color: #fff;\n    border-radius: 10px;\n    box-size: border-box;\n    box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.2);\n`;\n\nconst StyledButton = styled.button`\n    display: block;\n    background-color: #f7797d;\n    color: #fff;\n    font-size: .9rem;\n    border: 0;\n    border-radius: 5px;\n    height: 40px;\n    padding: 0 20px;\n    cursor: pointer;\n    box-sizing: border-box;\n    margin: 10px;\n    position: relative;\n    left: -10px;\n`\n\nconst StyledInput = styled.input`\n\n`\n\nconst StyledTextArea = styled.textarea`\n\n`\n\nconst StyledFieldset = styled.fieldset`\n\n`\n\nconst StyledError = styled.div`\n\n`\n\n\nconst formStyle = {\n    position: 'absolute',\n    top: '150px',\n    left: '450px',\n};\n\nconst headerStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '450px',\n    color: \"#26688E\"\n}\n\nconst textStyle = {\n    padding: '25px',\n    left: '100px'\n};\n\n\nconst FileUploadTrial = (props) => {\n\n    const {register, handleSubmit} = useForm()\n\n    const onSubmit = (data) => {\n        //const formData = new FormData()\n        props.fData.append(\"file\", data.csv[0]);\n        props.history.push('/trialForm');\n        // axios.post('http://127.0.0.1:5000/sendCSV', formData, {\n        //     headers: {\n        //         \"Authorization\": props.token\n        //     }\n        // }).then(res => console.log(res)).catch(err => console.warn(err))\n    }\n\n    return (\n        // style={formStyle}\n        <div>\n                <GlobalStyle/>\n                <h1 style = {headerStyle}>Data upload</h1>\n                <form style = {formStyle} onSubmit={handleSubmit(onSubmit)} className=\"form\">\n                    <input style={{color: \"#26688E\"}}f ref={register} type=\"file\" name=\"csv\" />\n                    <button className=\"btn btn-primary btn-block\" style={{margin: '10px', position: 'relative', left: '0px', top: '20px', backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Upload</button>\n                </form>\n        </div>\n    );\n}\n\nexport default FileUploadTrial;\n\n// <h2 style={headerStyle}>Please upload your csv file here!</h2>","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configCompTrial.js",["118","119","120"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport yaml from 'js-yaml';\nimport YAML from 'yaml';\nimport download from 'downloadjs';\nimport './configCompTrial.css';\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport { css } from \"@emotion/core\";\nimport { CsvToHtmlTable } from 'react-csv-to-table';\n//import styled from \"styled-components\";\nimport Button from 'react-bootstrap/Button';\nimport styled, {createGlobalStyle} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nconst configFormStyle = {\n    position: 'absolute',\n    left: '400px',\n    top: '100px'\n};\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  position: relative;\n  top: 100px;\n`;\n\nconst loadTextStyle={\n    position: 'relative',\n    top: \"100px\",\n    left: \"445px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst loadTextStyle2={\n    position: 'relative',\n    top: \"150px\",\n    left: \"45px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst downloadButtonStyle={\n    position: 'relative',\n    top: \"200px\",\n    left: \"-295px\",\n    //font: \"100000px\"\n};\n\nconst initialState = {\n    input_name: 'input.csv',\n    output_name: 'result',\n    time_format_type: 'index',\n    horizon: +3,\n    backtest: '',\n    eval_metric: 'wape',\n    display_metric: '',\n    use_gpu: 'no',\n    threads: 0,\n    algorithm: '',\n};\n\n\nexport default class ConfigCompTrial extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            input_name: 'input.csv',\n            output_name: 'result',\n            time_format_type: 'index',\n            horizon: +3,\n            backtest: '',\n            eval_metric: 'wape',\n            display_metric: '',\n            use_gpu: 'no',\n            threads: 0,\n            algorithm: '',\n\n            //not relating to form\n            submitted:'',\n\n            response:false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    updateOnRes = (res) => {\n        let csvData = res.data\n        //const newCSV = d3.csv(csvData, function(csvData) { console.log(csvData); });\n        //let newCSV = csvToJson.getJsonFromCsv(csvData)\n        //console.log(newCSV)\n        //this.props.res_result=csvData;\n        //console.log(this.props.res_result)\n        this.setState({response: csvData})\n        this.props.fData.delete('file')\n        this.props.fData.delete('file2')\n        this.setState(initialState)\n        //download(this.state.response, 'result.csv', 'csv')\n        //console.log(this.state.respose)\n       //this.props.history.push('/displayResult');\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault()\n        //parse the YAML file\n        const object = {\n            input_name: this.state.input_name,\n            output_name: this.state.output_name,\n            time_format_type: this.state.time_format_type,\n            forecast: {\n                horizon: parseInt(this.state.horizon)\n            },\n            backtest: {\n                evaluation_metric: this.state.eval_metric\n            },\n            hardware: {\n                use_gpu: this.state.use_gpu,\n                threads: this.state.threads\n            }\n        }\n\n        if (this.state.algorithm!=='') object['algorithms'] = this.state.algorithm\n        if (this.state.backtest !== '') object['backtest']['backtest_start_time'] = parseInt(this.state.backtest)\n        if (this.state.display_metric !== '') object['backtest']['display_metric'] = this.state.display_metric\n        if (this.state.threads !== '') object['hardware']['threads'] = parseInt(this.state.threads)\n\n        //const yamlObject = yaml.dump(object, {'sortKeys': false});\n        const yamlObject = new YAML.Document()\n        yamlObject.contents = object\n        console.log(yamlObject);\n\n        this.props.fData.append(\"file2\", yamlObject);\n        console.log(this.props.fData)\n\n        this.setState({submitted: true});\n\n        console.log(this.state.submitted)\n\n        //make request\n        axios.post('http://127.0.0.1:5000/sendCSV', this.props.fData, {\n            headers: {\n                \"Authorization\": \"trial\"\n            }\n        })\n        //.then(res => download(res.data, 'result.csv', 'csv'))\n        .then(res => {\n            //this.props.res_result=res;\n            //this.props.history.push('/displayResult');\n            this.updateOnRes(res);\n            //this.props.res_result=res.data\n        })\n        .catch(err => console.warn(err))\n\n    }\n\n    clickDownload = () => {\n        download(this.state.response, 'result.csv', 'csv')\n    }\n\n    myChangeHandlerAlgorithm = (event) => {\n        this.setState({algorithm: event.target.value});\n    }\n\n    myChangeHandlerInputName = (event) => {\n        this.setState({input_name: event.target.value});\n    }\n\n    myChangeHandlerOutputName = (event) => {\n        this.setState({output_name: event.target.value});\n    }\n\n    myChangeHandlerTimeFormat = (event) => {\n        this.setState({time_format_type: event.target.value});\n    }\n\n    myChangeHandlerHorizon = (event) => {\n        this.setState({horizon: event.target.value});\n    }\n\n    myChangeHandlerBacktest = (event) => {\n        this.setState({backtest: event.target.value});\n    }\n\n    myChangeHandlerEvaluation = (event) => {\n        this.setState({eval_metric: event.target.value});\n    }\n\n    myChangeHandlerDisplay = (event) => {\n        this.setState({display_metric: event.target.value});\n    }\n\n    myChangeHandlerGPU = (event) => {\n        this.setState({use_gpu: event.target.value});\n    }\n\n    myChangeHandlerThreads = (event) => {\n        this.setState({threads: event.target.value});\n    }\n\n    render() {\n        if (this.state.submitted!==true && this.state.response===false){\n            return (\n                <div>\n                <GlobalStyle/>\n                <form style={configFormStyle} onSubmit={this.handleSubmit} className=\"form\">\n                    <h3 style={{color: \"#26688E\"}}>Configs (all are optional)</h3>\n\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}> Select Algorithm (automl, nbeats, arima)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerAlgorithm} placeholder=\"default: automl\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Input Name</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerInputName} placeholder=\"default: input.csv\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Output Name</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerOutputName} placeholder=\"output name...\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Time Format Type (standard or index)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerTimeFormat} placeholder=\"default: index\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Forecast Horizon (+ horizon desired)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerHorizon} placeholder=\"default: +3\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Backtest Start Time (- desired backtest start)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerBacktest} placeholder=\"default: last 10% of data\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Evaluation Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerEvaluation} placeholder=\"default: wape\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Display Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerDisplay} placeholder=\"default: none\" />\n                    </div>\n\n                    <button style={{backgroundColor: \"#26688E\", borderColor: \"#26688E\"}} type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n\n                </form>\n                </div>\n            );\n        }\n        else if (this.state.response===false && this.state.submitted===true){\n            return (\n                //<Spinner animation=\"border\" />\n                <div>\n                    <GlobalStyle/>\n                    <ClimbingBoxLoader color={'#36D7B7'} loading={true} css={override} size={15} />\n                    <strong style={loadTextStyle}>Please wait, as we generate your forecast!</strong>\n                </div>\n            );\n        }\n        else if (this.state.response!==false){\n            return (\n                <>\n                    <GlobalStyle/>\n                    <strong style={loadTextStyle}>Your results are ready!</strong>\n                    <strong style={loadTextStyle2}>Click to download your .csv file with your results</strong>\n                    <Button variant=\"outline-primary\" style={downloadButtonStyle} size='lg' onClick={this.clickDownload}>Download</Button>{' '}\n                </>\n            );\n        }\n    }\n\n};\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/test.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/UserMenu.js",["121","122"],"import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nconst welcomeStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '50px',\n    color: \"#26688E\"\n};\n\nconst uploadDataButtonStyle = {\n    position: 'absolute',\n    top: '200px',\n    left: '50px',\n    color: \"#26688E\",\n    borderColor: \"#26688E\"\n};\n\nconst getDataStyle = {\n    position: 'absolute',\n    top: '275px',\n    left: '50px',\n    color: \"#26688E\",\n    borderColor: \"#26688E\"\n};\n\nconst SelectHeaderStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '50px'\n};\n\nexport default class UserMenu extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            getDataClicked: false,\n            dataArray: '',\n            leftVar: '50px',\n            leftTrack:50\n        };\n    }\n\n    goToUpload = () => {\n        this.props.history.push('fileUpload')\n    };\n\n    dataSelected = (selectedOne) => {\n        this.props.setSelected(selectedOne);\n        this.props.history.push('/selectedSavedData')\n    };\n\n    makeDataButtons = (data) => {\n        return(\n                <Button variant=\"outline-primary\" style={{position: 'absolute', top: '275px', left: data[2], color: \"#26688E\", borderColor: \"#26688E\"}} size='lg' onClick={() => {this.dataSelected(data[0])}}>{data[0]}({data[1]})</Button>\n        );\n    }\n\n    displayData = (inp) => {\n        let leftComp = 50\n        var asArray = []\n        for (var i in inp){\n            asArray.push([i, inp[i], leftComp.toString() + 'px']);\n            leftComp = leftComp+275\n        }\n        console.log(asArray)\n        this.setState({dataArray: asArray, getDataClicked: true})\n    };\n\n    listDatasets = () => {\n        axios.get('http://127.0.0.1:5000/getSavedData', {\n            headers: {\n                \"Authorization\": this.props.token\n            }\n        })\n        .then(res => {\n            this.displayData(res.data);\n        })\n        .catch(err => console.warn(err))\n    }\n\n    render () {\n        if (this.state.getDataClicked===false){\n            return (\n                <div>\n                    <GlobalStyle/>\n                    <h1 style={welcomeStyle}>Hello {this.props.username}, what would you like to do?</h1>\n                    <Button variant=\"outline-primary\" style={uploadDataButtonStyle} size='lg' onClick={this.goToUpload}>Upload New Data</Button>{' '}\n                    <Button variant=\"outline-primary\" style={getDataStyle} size='lg' onClick={this.listDatasets}>Work With Previously Saved Data</Button>{' '}\n                </div>\n            );\n        }\n        else{\n            return (\n                <div>\n                    <GlobalStyle/>\n                    <h1 style={SelectHeaderStyle}>Please select which data you would like to work with!</h1>\n                    {this.state.dataArray.map(this.makeDataButtons, this)}\n                </div>\n            );\n        }\n    }\n}","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DataSelected.js",["123"],"import React, { Component, useState } from 'react';\nimport {useForm} from 'react-hook-form';\nimport axios from 'axios';\nimport { css } from \"@emotion/core\";\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport download from 'downloadjs';\nimport Button from 'react-bootstrap/Button';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  position: relative;\n  top: 100px;\n`;\n\nconst loadTextStyle={\n    position: 'relative',\n    top: \"100px\",\n    left: \"550px\",\n    //font: \"100000px\"\n};\n\nconst loadTextStyle2={\n    position: 'relative',\n    top: \"150px\",\n    left: \"125px\",\n    //font: \"100000px\"\n};\n\nconst downloadButtonStyle={\n    position: 'relative',\n    top: \"200px\",\n    left: \"-225px\",\n    //font: \"100000px\"\n};\n\nconst formStyle = {\n    position: 'absolute',\n    top: '250px',\n    left: '450px'\n};\n\nconst headerStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '40px'\n}\n\nconst DataSelected = (props) => {\n\n    const {register, handleSubmit} = useForm()\n\n    const [submitted,updateSubmitted]=useState(false);\n    const [responseGot, updateGot]=useState(false)\n\n    const afterResponse = (res) => {\n        updateGot(res.data);\n        props.fData.delete(\"file\");\n    }\n\n    const onSubmit = (data) => {\n        //const formData = new FormData()\n        updateSubmitted(!submitted);\n        props.fData.append(\"file\", data.csv[0]);\n        axios.post('http://127.0.0.1:5000/updateAndPredict', props.fData, {\n            headers: {\n                \"Authorization\": props.token,\n                \"data_id\": props.data_id\n            }\n        })\n        .then(res => {\n            afterResponse(res)\n        })\n        .catch(err => console.warn(err))\n    }\n\n    const clickDownload = () => {\n        download(responseGot, 'result.csv', 'csv')\n    }\n\n    if (submitted===false){\n        return (\n            <div>\n                <h2 style={headerStyle}>Please upload the new data you would like to append to this dataset to get newer forecasts</h2>\n                <form onSubmit={handleSubmit(onSubmit)} style={formStyle}>\n                    <input ref={register} type=\"file\" name=\"csv\" />\n                    <button>Submit</button>\n                </form>\n            </div>\n        );\n    }\n    else if (submitted===true && responseGot===false){\n        return (\n            <div>\n                <ClimbingBoxLoader color={'#36D7B7'} loading={true} css={override} size={15} />\n                <strong style={loadTextStyle}>Please wait, as we generate your forecast!</strong>\n            </div>\n        );\n    }\n    else{\n        return (\n            <>\n                <strong style={loadTextStyle}>Your results are ready!</strong>\n                <strong style={loadTextStyle2}>Click to download your .csv file with your results</strong>\n                <Button variant=\"outline-primary\" style={downloadButtonStyle} size='lg' onClick={clickDownload}>Download</Button>{' '}\n            </>\n        );\n    }\n\n\n}\n\nexport default DataSelected;","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/AboutPage.js",["124","125"],"import React, { Component } from 'react';\nimport Typist from 'react-typist';\nimport { Fade, Slide } from \"react-awesome-reveal\";\nimport './AboutPage.css'\nimport Table from 'react-bootstrap/Table';\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #ECECF5;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\n\nconst HeaderStyle = {\n    position: 'relative',\n    top: '50px',\n    left: '50px'\n};\n\nconst test = {\n    position: 'relative',\n    top: '75px',\n    left: '50px'\n};\n\nconst posList={\n    position: 'relative',\n    left: '-50px',\n    top: \"100px\"\n};\n\nconst InputStyle = {\n    position: 'relative',\n    top: \"100px\",\n    left: '50px'\n};\n\nconst InputText = {\n    position: 'relative',\n    top: \"145px\",\n    left: '130px',\n    right: \"80px\"\n};\n\nexport default class AboutPage extends Component {\n    render () {\n        return (\n            <div>\n                <GlobalStyle/>\n                <Typist>\n                    <h1 style={HeaderStyle}>About The API</h1>\n                </Typist>\n\n                <Fade style={test}>\n                    <strong>Introducing a very user friendly way for anyone, engineers and non-engineers alike, to easily upload time series data and get accurate forecasts fast!</strong>\n                </Fade>\n\n                <center>\n                <strong>\n                    <ol class=\"center\" type=\"1\" style={posList}>\n                        <li>Upload Data</li>\n                        <li>Select configurations if desired (or leave blank!)</li>\n                        <li>Wait for your forecasts</li>\n                    </ol>\n                </strong>\n                </center>\n\n                <Slide direction=\"up\">\n                    <h1 style={InputStyle}> Input Data Format</h1>\n                    <p style={InputText}>Data must be given as a .csv file; <b>The first column must be the time column and second column the data column.</b></p>\n                    <h4 style={{position: 'relative', top: '160px', left: \"130px\"}}>Example:</h4>\n\n                    <Table striped bordered hover size=\"sm\" variant=\"dark\" style={{width: \"500px\", position: 'relative', top: \"185px\", left: \"425px\"}}>\n                        <thead>\n                            <tr>\n                                <th>Date</th>\n                                <th>Items Sold</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>1/1/2021</td>\n                                <td>100</td>\n                            </tr>\n                            <tr>\n                                <td>2/1/2021</td>\n                                <td>250</td>\n                            </tr>\n                            <tr>\n                                <td>2/1/2021</td>\n                                <td>400</td>\n                            </tr>\n                            <tr>\n                                <td>2/1/2021</td>\n                                <td>350</td>\n                            </tr>\n                            <tr>\n                                <td>5/1/2021</td>\n                                <td>475</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n\n                    <h1 style={{position: 'relative', top: '260px', left: \"50px\"}}>Configurations</h1>\n                    <p style={{position: \"relative\", top: \"285px\", left: \"130px\", right: \"80px\"}}>All configurations are optional and are set to default values if their fields are not specified. A variety of configurations are offered for you to best suite</p>\n                    <p style={{position: \"relative\", top: \"290px\", left: \"210px\", right: \"80px\"}}>your data forecasting needs!</p>\n                </Slide>\n            </div>\n        );\n    }\n}",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":14},{"ruleId":"130","severity":1,"message":"134","line":2,"column":36,"nodeType":"132","messageId":"133","endLine":2,"endColumn":39},{"ruleId":"130","severity":1,"message":"131","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":14},{"ruleId":"130","severity":1,"message":"134","line":4,"column":36,"nodeType":"132","messageId":"133","endLine":4,"endColumn":39},{"ruleId":"130","severity":1,"message":"135","line":54,"column":15,"nodeType":"132","messageId":"133","endLine":54,"endColumn":25},{"ruleId":"130","severity":1,"message":"131","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":14},{"ruleId":"130","severity":1,"message":"134","line":4,"column":36,"nodeType":"132","messageId":"133","endLine":4,"endColumn":39},{"ruleId":"130","severity":1,"message":"136","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"131","line":5,"column":8,"nodeType":"132","messageId":"133","endLine":5,"endColumn":14},{"ruleId":"130","severity":1,"message":"134","line":5,"column":36,"nodeType":"132","messageId":"133","endLine":5,"endColumn":39},{"ruleId":"130","severity":1,"message":"137","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":12},{"ruleId":"130","severity":1,"message":"138","line":9,"column":10,"nodeType":"132","messageId":"133","endLine":9,"endColumn":24},{"ruleId":"130","severity":1,"message":"131","line":11,"column":8,"nodeType":"132","messageId":"133","endLine":11,"endColumn":14},{"ruleId":"130","severity":1,"message":"138","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":24},{"ruleId":"130","severity":1,"message":"139","line":2,"column":29,"nodeType":"132","messageId":"133","endLine":2,"endColumn":36},{"ruleId":"130","severity":1,"message":"136","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"140","line":22,"column":7,"nodeType":"132","messageId":"133","endLine":22,"endColumn":18},{"ruleId":"130","severity":1,"message":"141","line":32,"column":7,"nodeType":"132","messageId":"133","endLine":32,"endColumn":23},{"ruleId":"130","severity":1,"message":"142","line":41,"column":7,"nodeType":"132","messageId":"133","endLine":41,"endColumn":17},{"ruleId":"130","severity":1,"message":"143","line":51,"column":7,"nodeType":"132","messageId":"133","endLine":51,"endColumn":19},{"ruleId":"130","severity":1,"message":"144","line":67,"column":7,"nodeType":"132","messageId":"133","endLine":67,"endColumn":18},{"ruleId":"130","severity":1,"message":"145","line":71,"column":7,"nodeType":"132","messageId":"133","endLine":71,"endColumn":21},{"ruleId":"130","severity":1,"message":"146","line":75,"column":7,"nodeType":"132","messageId":"133","endLine":75,"endColumn":21},{"ruleId":"130","severity":1,"message":"147","line":79,"column":7,"nodeType":"132","messageId":"133","endLine":79,"endColumn":18},{"ruleId":"130","severity":1,"message":"148","line":97,"column":7,"nodeType":"132","messageId":"133","endLine":97,"endColumn":16},{"ruleId":"130","severity":1,"message":"137","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":12},{"ruleId":"130","severity":1,"message":"138","line":9,"column":10,"nodeType":"132","messageId":"133","endLine":9,"endColumn":24},{"ruleId":"130","severity":1,"message":"131","line":12,"column":8,"nodeType":"132","messageId":"133","endLine":12,"endColumn":14},{"ruleId":"130","severity":1,"message":"131","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":14},{"ruleId":"130","severity":1,"message":"134","line":4,"column":36,"nodeType":"132","messageId":"133","endLine":4,"endColumn":39},{"ruleId":"130","severity":1,"message":"149","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":26},{"ruleId":"130","severity":1,"message":"131","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":14},{"ruleId":"130","severity":1,"message":"134","line":6,"column":36,"nodeType":"132","messageId":"133","endLine":6,"endColumn":39},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","'jsonSignUp' is assigned a value but never used.","'axios' is defined but never used.","'yaml' is defined but never used.","'CsvToHtmlTable' is defined but never used.","'NavMenu' is defined but never used.","'sharedStyle' is assigned a value but never used.","'StyledFormrapper' is assigned a value but never used.","'StyledForm' is assigned a value but never used.","'StyledButton' is assigned a value but never used.","'StyledInput' is assigned a value but never used.","'StyledTextArea' is assigned a value but never used.","'StyledFieldset' is assigned a value but never used.","'StyledError' is assigned a value but never used.","'textStyle' is assigned a value but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]