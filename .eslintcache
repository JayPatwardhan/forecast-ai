[{"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/index.js":"1","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/App.js":"2","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/reportWebVitals.js":"3","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/index.js":"4","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Signup.js":"5","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/index.js":"6","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/NavbarElements.js":"7","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Login.js":"8","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUpload.js":"9","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configComp.js":"10","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DisplayResult.js":"11","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/index.js":"12","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/LoggedInNavElements.js":"13","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUploadTrial.js":"14","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configCompTrial.js":"15","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/test.js":"16","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/UserMenu.js":"17","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DataSelected.js":"18","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/AboutPage.js":"19","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/HomeChart.js":"20","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/UserMenuButton.js":"21"},{"size":603,"mtime":1610229682898,"results":"22","hashOfConfig":"23"},{"size":3528,"mtime":1613427893335,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1609529741104,"results":"25","hashOfConfig":"23"},{"size":1446,"mtime":1611987245505,"results":"26","hashOfConfig":"23"},{"size":3646,"mtime":1613207317087,"results":"27","hashOfConfig":"23"},{"size":961,"mtime":1611571879233,"results":"28","hashOfConfig":"23"},{"size":1589,"mtime":1611602101685,"results":"29","hashOfConfig":"23"},{"size":3800,"mtime":1613207371331,"results":"30","hashOfConfig":"23"},{"size":1692,"mtime":1611569261856,"results":"31","hashOfConfig":"23"},{"size":11624,"mtime":1613207535560,"results":"32","hashOfConfig":"23"},{"size":685,"mtime":1610252511170,"results":"33","hashOfConfig":"23"},{"size":607,"mtime":1611571117348,"results":"34","hashOfConfig":"23"},{"size":1587,"mtime":1611571765008,"results":"35","hashOfConfig":"23"},{"size":3341,"mtime":1611608656845,"results":"36","hashOfConfig":"23"},{"size":10629,"mtime":1613207465235,"results":"37","hashOfConfig":"23"},{"size":164,"mtime":1610249144927,"results":"38","hashOfConfig":"23"},{"size":7321,"mtime":1613242246709,"results":"39","hashOfConfig":"23"},{"size":3669,"mtime":1613207773725,"results":"40","hashOfConfig":"23"},{"size":4033,"mtime":1613207840249,"results":"41","hashOfConfig":"23"},{"size":993,"mtime":1611608772951,"results":"42","hashOfConfig":"23"},{"size":578,"mtime":1611825234006,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"mhr0t5",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"46"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"46"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"46"},"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/index.js",[],["102","103"],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/App.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/reportWebVitals.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/index.js",["104","105","106"],"import React from 'react'\nimport styled, {createGlobalStyle, css} from 'styled-components';\nimport HomeChart from '../components/HomeChart';\nimport { Fade} from \"react-awesome-reveal\";\nimport UserMenuButton  from '../components/UserMenuButton'\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\n\nconst chartStyle = {\n    width: '500px',\n    position: 'relative',\n    //top: '120px',\n    //left: '25px'\n    top: '100px',\n    left: '400px'\n};\n\n\n\n\nconst headerStyle = {\n    position: 'absolute',\n    left: '230px',\n    top: '95px',\n    color: '#36D7B7'\n};\n\n//<div style={{width: \"100%\", height: \"0\", paddingNottom: \"100%\", position: \"relative\"}}><iframe src=\"https://giphy.com/embed/8gNQZ9IpkcdiAjfOgN\" width=\"100%\" height=\"100%\" style={{position:\"absolute\"}} frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe></div><p><a href=\"https://giphy.com/gifs/illustration-marketing-data-8gNQZ9IpkcdiAjfOgN\">via GIPHY</a></p>\n\nconst Home = (props) => {\n    return (\n        <div>\n            <GlobalStyle/>\n            <Fade style={headerStyle}>\n                <h1>Forecasts at the click of a button</h1>\n            </Fade>\n            <div style={chartStyle}>\n                <HomeChart/>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Signup.js",["107","108","109"],"import React, { Component } from 'react';\nimport './Signup.css' ;\nimport axios from 'axios';\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst signInStyle = {\n    position: 'relative',\n    top: '65px'\n}\n\n//#3A3A3C\n//#242424\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nexport default class Signup extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            username: '',\n            password: '',\n            SignedUp: false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    myChangeHandlerUsername = (event) => {\n        this.setState({username: event.target.value});\n    }\n\n    myChangeHandlerPassword = (event) => {\n        this.setState({password: event.target.value});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault()\n        const formData = new FormData()\n        formData.append(\"username\", this.state.username);\n        formData.append(\"password\", this.state.password);\n        const jsonSignUp = {\n            \"username\": this.state.username,\n            \"password\": this.state.password,\n        };\n        const signed = await this.sendreq(formData)\n        if (signed === 'success'){\n            this.setState((state) => {\n                return {SignedUp: true};\n            });\n        }\n        else{\n            this.setState((state) => {\n                return {SignedUp: false};\n            });\n        }\n    }\n\n    async sendreq(jsonSignUp){\n        const {data: response} = await axios.post(this.props.url+'/newUser', jsonSignUp)\n        return response;\n    }\n\n\n    render(){\n        if (this.state.SignedUp === false){\n            return (\n                <div>\n                <GlobalStyle/>\n                <form style = {signInStyle} onSubmit = {this.handleSubmit} className='form'>\n                        <h3 style={{color: \"#26688E\"}}>Sign Up</h3>\n\n                        <div className=\"form-group\">\n                            <label style={{color: \"#26688E\"}}>Username</label>\n                            <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerUsername} placeholder=\"Username\" />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label style={{color: \"#26688E\"}}>Password</label>\n                            <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"password\" className=\"form-control\" onChange = {this.myChangeHandlerPassword} placeholder=\"Enter password\" />\n                        </div>\n\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\" style={{backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Sign Up</button>\n                        <p className=\"forgot-password text-right\">\n                            Already registered? <a style={{color: \"#26688E\"}} href=\"/Login\">Log In</a>\n                        </p>\n                    </form>\n                    </div>\n            );\n            }\n            else{\n                return (\n                <div>\n                    <GlobalStyle/>\n                    <h1 style={{color: \"#36D7B7\"}}>Welcome, {this.state.username}</h1>\n                    <a style={{color: \"#26688E\"}} href=\"/Login\">Click here to Log In!</a>\n                </div>\n                );\n            }\n        }\n}","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/index.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/Navbar/NavbarElements.js",[],["110","111"],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/Login.js",["112","113"],"import React, {Component} from 'react' ;\nimport axios from 'axios';\nimport './Login.css'\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nconst logInStyle = {\n    position: 'relative',\n    top: '65px'\n}\n\nexport default class Login extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            LoggedIn: false,\n            username: '',\n            password: '',\n            first: false,\n            token: '',\n            wrongLogin:false\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    myChangeHandlerUserName = (event) => {\n        this.setState({username: event.target.value});\n    }\n\n    myChangeHandlerPassword = (event) => {\n        this.setState({password: event.target.value});\n    }\n\n\n\n    //login click method\n    async handleSubmit(event) {\n        event.preventDefault()\n        const loginForm = new FormData()\n        loginForm.append(\"username\", this.state.username);\n        loginForm.append(\"password\", this.state.password);\n        //const jsonLogin = {\"email\": this.state.username, \"password\": this.state.password};\n        const response = await this.sendreq(loginForm)\n        console.log(response.token)\n        if (response.token !== 'Invalid username and/or password'){\n            this.props.toggleLoggedIn()\n            this.props.setToken(response.token)\n            this.props.setUserName(this.state.username)\n            this.props.history.push('/userMenu')\n        }\n        else{\n            this.setState({wrongLogin: true});\n        }\n    }\n\n    //sends login get request\n    async sendreq(jsonLogin) {\n        const {data: response} = await axios.post(this.props.url + '/Login',  jsonLogin);\n        return response\n    }\n\n    displayWrongPassword = () => {\n        if(this.state.wrongLogin === true){\n            return (\n                <p style={{color: \"#e60000\"}}> Invalid username and/or password</p>\n            );\n        }\n    }\n\n\n\n    render() {\n        if (this.props.isLoggedIn === false) {\n            return (\n                <div>\n                <GlobalStyle/>\n                <form style={logInStyle} onSubmit = {this.handleSubmit} className = 'form'>\n                    <h3 style={{color: \"#26688E\"}}>Log In</h3>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#26688E\"}}>Username</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerUserName} placeholder=\"Enter username\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#26688E\"}}>Password</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"password\" className=\"form-control\" onChange = {this.myChangeHandlerPassword} placeholder=\"Enter password\" />\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\" style={{backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Log In</button>\n                    <p className=\"forgot-password text-right\">\n                            Forgot <a style={{color: \"#26688E\"}} href=\"/\">password?</a>\n                    </p>\n                    {this.displayWrongPassword()}\n                </form>\n                </div>\n            );\n        }\n        else {\n            return(\n                <h1>Hello</h1>\n            );\n        }\n    }\n\n    \n}","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUpload.js",["114","115","116"],"import axios from 'axios';\nimport React from 'react';\nimport {useForm} from 'react-hook-form';\nimport './FileUpload.css'\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\n\nconst formStyle = {\n    position: 'absolute',\n    top: '150px',\n    left: '450px'\n};\n\nconst headerStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '435px',\n    color: \"#26688E\"\n}\n\nconst FileUpload = (props) => {\n\n    const {register, handleSubmit} = useForm()\n\n    const onSubmit = (data) => {\n        //const formData = new FormData()\n        props.fData.append(\"file\", data.csv[0]);\n        props.history.push('/config');\n        // axios.post('http://127.0.0.1:5000/sendCSV', formData, {\n        //     headers: {\n        //         \"Authorization\": props.token\n        //     }\n        // }).then(res => console.log(res)).catch(err => console.warn(err))\n    }\n\n    return (\n        <div>\n            <GlobalStyle/>\n            <h2 style={headerStyle}>Please upload your csv file here!</h2>\n            <form onSubmit={handleSubmit(onSubmit)} style={formStyle} className='form'>\n                <input style={{color: \"#26688E\"}} ref={register} type=\"file\" name=\"csv\" />\n                <button className=\"btn btn-primary btn-block\" style={{margin: '10px', position: 'relative', left: '0px', top: '20px', backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default FileUpload;","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configComp.js",["117","118","119"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport yaml from 'js-yaml';\nimport YAML from 'yaml';\nimport download from 'downloadjs';\nimport './configComp.css';\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport { css } from \"@emotion/core\";\nimport { CsvToHtmlTable } from 'react-csv-to-table';\nimport Button from 'react-bootstrap/Button';\nimport styled, {createGlobalStyle} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  position: relative;\n  top: 100px;\n`;\n\nconst configFormStyle = {\n    position: 'absolute',\n    left: '400px',\n    top: '100px'\n};\n\nconst loadTextStyle={\n    position: 'relative',\n    top: \"100px\",\n    left: \"475px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst loadTextStyle2={\n    position: 'relative',\n    top: \"150px\",\n    left: \"40px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst downloadButtonStyle={\n    position: 'relative',\n    top: \"200px\",\n    left: \"-295px\",\n    //font: \"100000px\"\n};\n\nconst initialState = {\n    input_name: 'input.csv',\n    output_name: 'result',\n    time_format_type: 'index',\n    horizon: +3,\n    backtest: '',\n    eval_metric: 'wape',\n    display_metric: '',\n    use_gpu: 'no',\n    threads: 0,\n    algorithm: '',\n    save_data: ''\n};\n\n\nexport default class configComp extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            input_name: 'input.csv',\n            output_name: 'result',\n            time_format_type: 'index',\n            horizon: +3,\n            backtest: '',\n            eval_metric: 'wape',\n            display_metric: '',\n            use_gpu: 'no',\n            threads: 0,\n            algorithm: '',\n            save_data: '',\n\n            //not relating to form\n            submitted:'',\n\n            response:false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    updateOnRes = (res) => {\n        let csvData = res.data\n        //const newCSV = d3.csv(csvData, function(csvData) { console.log(csvData); });\n        //let newCSV = csvToJson.getJsonFromCsv(csvData)\n        //console.log(newCSV)\n        //this.props.res_result=csvData;\n        //console.log(this.props.res_result)\n        this.setState({response: csvData})\n        //console.log(this.state.response)\n        this.props.fData.delete(\"file\")\n        this.props.fData.delete(\"file2\")\n        this.setState(initialState)\n        //download(this.state.response, 'result.csv', 'csv')\n        //console.log(this.state.respose)\n       //this.props.history.push('/displayResult');\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault()\n        //parse the YAML file\n        const object = {\n            input_name: this.state.input_name,\n            output_name: this.state.output_name,\n            time_format_type: this.state.time_format_type,\n            forecast: {\n                horizon: parseInt(this.state.horizon)\n            },\n            backtest: {\n                evaluation_metric: this.state.eval_metric\n            },\n            hardware: {\n                use_gpu: this.state.use_gpu,\n                threads: this.state.threads\n            }\n        }\n\n        if (this.state.save_data!=='') object[\"save_data\"] = this.state.save_data\n        if (this.state.algorithm!=='') object['algorithms'] = this.state.algorithm\n        if (this.state.backtest !== '') object['backtest']['backtest_start_time'] = parseInt(this.state.backtest)\n        if (this.state.display_metric !== '') object['backtest']['display_metric'] = this.state.display_metric\n        if (this.state.threads !== '') object['hardware']['threads'] = parseInt(this.state.threads)\n        console.log(object)\n\n        //const yamlObject = yaml.dump(object, {'sortKeys': false});\n        const yamlObject = new YAML.Document()\n        yamlObject.contents = object\n        console.log(object);\n\n        this.props.fData.append(\"file2\", yamlObject);\n        //console.log(this.props.fData)\n\n        this.setState({submitted: true});\n\n        //console.log(this.state.submitted)\n\n        //make request\n        axios.post(this.props.url + '/sendCSV', this.props.fData, {\n            headers: {\n                \"Authorization\": this.props.token\n            }\n        })\n        //.then(res => download(res.data, 'result.csv', 'csv'))\n        .then(res => {\n            //this.props.res_result=res;\n            //this.props.history.push('/displayResult');\n            this.updateOnRes(res);\n            //this.props.res_result=res.data\n        })\n        .catch(err => console.warn(err))\n\n    }\n\n    clickDownload = () => {\n        download(this.state.response, 'result.csv', 'csv')\n    }\n\n    myChangeHandlerSaveData = (event) => {\n        this.setState({save_data: event.target.value});\n    }\n\n    myChangeHandlerAlgorithm = (event) => {\n        this.setState({algorithm: event.target.value});\n    }\n\n    myChangeHandlerInputName = (event) => {\n        this.setState({input_name: event.target.value});\n    }\n\n    myChangeHandlerOutputName = (event) => {\n        this.setState({output_name: event.target.value});\n    }\n\n    myChangeHandlerTimeFormat = (event) => {\n        this.setState({time_format_type: event.target.value});\n    }\n\n    myChangeHandlerHorizon = (event) => {\n        this.setState({horizon: event.target.value});\n    }\n\n    myChangeHandlerBacktest = (event) => {\n        this.setState({backtest: event.target.value});\n    }\n\n    myChangeHandlerEvaluation = (event) => {\n        this.setState({eval_metric: event.target.value});\n    }\n\n    myChangeHandlerDisplay = (event) => {\n        this.setState({display_metric: event.target.value});\n    }\n\n    myChangeHandlerGPU = (event) => {\n        this.setState({use_gpu: event.target.value});\n    }\n\n    myChangeHandlerThreads = (event) => {\n        this.setState({threads: event.target.value});\n    }\n\n    render() {\n        if (this.state.submitted!==true && this.state.response===false){\n            return (\n                <div>\n                <GlobalStyle/>\n                <form style={configFormStyle} onSubmit={this.handleSubmit} className=\"form\">\n                    <h3 style={{color: \"#26688E\"}}>Configs (all are optional)</h3>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}> Would you like to save this dataset? (yes/no)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerSaveData} placeholder=\"default: no\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}> Select Algorithm (automl, nbeats, arima, regression)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerAlgorithm} placeholder=\"default: automl\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#fff\"}}>Input Name</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerInputName} placeholder=\"default: input.csv\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#fff\"}}>Output Name</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerOutputName} placeholder=\"default: result.csv\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#fff\"}}>Time Format Type (standard or index)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerTimeFormat} placeholder=\"default: index\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#26688E\"}}>Forecast Horizon (+ horizon desired)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerHorizon} placeholder=\"default: +3\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#26688E\"}}>Backtest Start Time (- desired backtest start)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerBacktest} placeholder=\"default: last 10% of data\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Evaluation Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerEvaluation} placeholder=\"default: wape\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Display Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerDisplay} placeholder=\"Other metrics to show\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#fff\"}}>Threads to Use</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerThreads} placeholder=\"default: 0\" />\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\" style={{backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Submit</button>\n\n                </form>\n                </div>\n            );\n        }\n        else if (this.state.response===false && this.state.submitted===true){\n            return (\n                //<Spinner animation=\"border\" />\n                <div>\n                    <GlobalStyle/>\n                    <ClimbingBoxLoader color={'#36D7B7'} loading={true} css={override} size={15} />\n                    <strong style={loadTextStyle}>Please wait, as we generate your forecast!</strong>\n                </div>\n            );\n        }\n        else if (this.state.response!==false){\n            return (\n                <>\n                    <GlobalStyle/>\n                    <strong style={loadTextStyle}>Your results are ready!</strong>\n                    <strong style={loadTextStyle2}>Click to download your .csv file with your results</strong>\n                    <Button variant=\"outline-primary\" style={downloadButtonStyle} size='lg' onClick={this.clickDownload}>Download</Button>{' '}\n                </>\n            );\n        }\n    }\n\n};\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DisplayResult.js",["120"],"import React, {Component} from 'react' ;\nimport { CsvToHtmlTable } from 'react-csv-to-table';\n\nexport default class DisplayResult extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            yes: ''\n        };\n\n        //this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.props.test}</h1>\n                <h1>{this.props.res_result}</h1>\n            </div>\n        );\n    }\n\n}\n\n//<CsvToHtmlTable \n  //              data = {this.props.res_result}\n    //            csvDelimiter=\",\"\n      //          tableClassName=\"table table-striped table-hover\"\n        //    />","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/index.js",["121"],"import React from 'react'\nimport {Nav, NavLink, Bars, NavMenu, NavBtn, NavBtnLink} from './LoggedInNavElements';\n\n\nconst NavbarLoggedIn = (props) => {\n    return (\n        <>\n            <Nav>\n                <NavLink style={{color: \"#26688E\"}} to=\"/userMenu\">\n                    <h1>Forecast A(P)I</h1>\n                </NavLink>\n                <Bars/>\n                <NavBtn onClick={props.logOut}>\n                    <NavBtnLink to=\"/\">\n                        Log Out\n                    </NavBtnLink>\n                </NavBtn>\n            </Nav>\n        </>\n    )\n}\n\nexport default NavbarLoggedIn;\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/LoggedInNavbar/LoggedInNavElements.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/FileUploadTrial.js",["122","123","124","125","126","127","128","129","130","131"],"import axios from 'axios';\nimport React from 'react';\nimport {useForm} from 'react-hook-form';\nimport './FileUploadTrial.css'\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\n\nconst sharedStyle = css`\n    background-color: #eee;\n    height: 40px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    margin: 10px 0 20px 0;\n    padding: 20px;\n    box-sizing: border-box;\n`;\n\nconst StyledFormrapper = styled.form`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 850px;\n    padding: 0 20px;\n\n`;\n\nconst StyledForm = styled.form`\n    width: 100%;\n    max-width: 700px;\n    padding: 50px;\n    background-color: #fff;\n    border-radius: 10px;\n    box-size: border-box;\n    box-shadow: 0px 0px 20px 0px rgba(0, 0, 0, 0.2);\n`;\n\nconst StyledButton = styled.button`\n    display: block;\n    background-color: #f7797d;\n    color: #fff;\n    font-size: .9rem;\n    border: 0;\n    border-radius: 5px;\n    height: 40px;\n    padding: 0 20px;\n    cursor: pointer;\n    box-sizing: border-box;\n    margin: 10px;\n    position: relative;\n    left: -10px;\n`\n\nconst StyledInput = styled.input`\n\n`\n\nconst StyledTextArea = styled.textarea`\n\n`\n\nconst StyledFieldset = styled.fieldset`\n\n`\n\nconst StyledError = styled.div`\n\n`\n\n\nconst formStyle = {\n    position: 'absolute',\n    top: '150px',\n    left: '450px',\n};\n\nconst headerStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '450px',\n    color: \"#26688E\"\n}\n\nconst textStyle = {\n    padding: '25px',\n    left: '100px'\n};\n\n\nconst FileUploadTrial = (props) => {\n\n    const {register, handleSubmit} = useForm()\n\n    const onSubmit = (data) => {\n        //const formData = new FormData()\n        props.fData.append(\"file\", data.csv[0]);\n        props.history.push('/trialForm');\n        // axios.post('http://127.0.0.1:5000/sendCSV', formData, {\n        //     headers: {\n        //         \"Authorization\": props.token\n        //     }\n        // }).then(res => console.log(res)).catch(err => console.warn(err))\n    }\n\n    return (\n        // style={formStyle}\n        <div>\n                <GlobalStyle/>\n                <h1 style = {headerStyle}>Data upload</h1>\n                <form style = {formStyle} onSubmit={handleSubmit(onSubmit)} className=\"form\">\n                    <input style={{color: \"#26688E\"}}f ref={register} type=\"file\" name=\"csv\" />\n                    <button className=\"btn btn-primary btn-block\" style={{margin: '10px', position: 'relative', left: '0px', top: '20px', backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Upload</button>\n                </form>\n                <h4 style={{position: 'absolute', top: '400px', left: '50px', color: '#fff'}}>Upload your data as a .csv file here, and get the forecasts you desire!</h4>\n                <h4 style={{position: 'absolute', top: '450px', left: '50px', color: '#fff'}}>To see how your data should be formatted in further detail, please refer to <a href='/About' style={{color: '#36D7B7'}}> About </a></h4>\n        </div>\n    );\n}\n\nexport default FileUploadTrial;\n\n// <h2 style={headerStyle}>Please upload your csv file here!</h2>","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/configCompTrial.js",["132","133","134"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport yaml from 'js-yaml';\nimport YAML from 'yaml';\nimport download from 'downloadjs';\nimport './configCompTrial.css';\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport { css } from \"@emotion/core\";\nimport { CsvToHtmlTable } from 'react-csv-to-table';\n//import styled from \"styled-components\";\nimport Button from 'react-bootstrap/Button';\nimport styled, {createGlobalStyle} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nconst configFormStyle = {\n    position: 'absolute',\n    left: '400px',\n    top: '100px'\n};\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  position: relative;\n  top: 100px;\n`;\n\nconst loadTextStyle={\n    position: 'relative',\n    top: \"100px\",\n    left: \"445px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst loadTextStyle2={\n    position: 'relative',\n    top: \"150px\",\n    left: \"45px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst downloadButtonStyle={\n    position: 'relative',\n    top: \"200px\",\n    left: \"-295px\",\n    //font: \"100000px\"\n};\n\nconst initialState = {\n    input_name: 'input.csv',\n    output_name: 'result',\n    time_format_type: 'index',\n    horizon: +3,\n    backtest: '',\n    eval_metric: 'wape',\n    display_metric: '',\n    use_gpu: 'no',\n    threads: 0,\n    algorithm: '',\n};\n\n\nexport default class ConfigCompTrial extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            input_name: 'input.csv',\n            output_name: 'result',\n            time_format_type: 'index',\n            horizon: +3,\n            backtest: '',\n            eval_metric: 'wape',\n            display_metric: '',\n            use_gpu: 'no',\n            threads: 0,\n            algorithm: '',\n\n            //not relating to form\n            submitted:'',\n\n            response:false\n        }\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    updateOnRes = (res) => {\n        let csvData = res.data\n        console.log(csvData.split(','))\n        //const newCSV = d3.csv(csvData, function(csvData) { console.log(csvData); });\n        //let newCSV = csvToJson.getJsonFromCsv(csvData)\n        //console.log(newCSV)\n        //this.props.res_result=csvData;\n        //console.log(this.props.res_result)\n        this.setState({response: csvData})\n        this.props.fData.delete('file')\n        this.props.fData.delete('file2')\n        this.setState(initialState)\n        //download(this.state.response, 'result.csv', 'csv')\n        //console.log(this.state.respose)\n       //this.props.history.push('/displayResult');\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault()\n        //parse the YAML file\n        const object = {\n            input_name: this.state.input_name,\n            output_name: this.state.output_name,\n            time_format_type: this.state.time_format_type,\n            forecast: {\n                horizon: parseInt(this.state.horizon)\n            },\n            backtest: {\n                evaluation_metric: this.state.eval_metric\n            },\n            hardware: {\n                use_gpu: this.state.use_gpu,\n                threads: this.state.threads\n            }\n        }\n\n        if (this.state.algorithm!=='') object['algorithms'] = this.state.algorithm\n        if (this.state.backtest !== '') object['backtest']['backtest_start_time'] = parseInt(this.state.backtest)\n        if (this.state.display_metric !== '') object['backtest']['display_metric'] = this.state.display_metric\n        if (this.state.threads !== '') object['hardware']['threads'] = parseInt(this.state.threads)\n\n        //const yamlObject = yaml.dump(object, {'sortKeys': false});\n        const yamlObject = new YAML.Document()\n        yamlObject.contents = object\n        console.log(yamlObject);\n\n        this.props.fData.append(\"file2\", yamlObject);\n        console.log(this.props.fData)\n\n        this.setState({submitted: true});\n\n        console.log(this.state.submitted)\n\n        //make request\n        axios.post(this.props.url + '/sendCSV', this.props.fData, {\n            headers: {\n                \"Authorization\": \"trial\"\n            }\n        })\n        //.then(res => download(res.data, 'result.csv', 'csv'))\n        .then(res => {\n            //this.props.res_result=res;\n            //this.props.history.push('/displayResult');\n            this.updateOnRes(res);\n            //this.props.res_result=res.data\n        })\n        .catch(err => console.warn(err))\n\n    }\n\n    clickDownload = () => {\n        download(this.state.response, 'result.csv', 'csv')\n    }\n\n    myChangeHandlerAlgorithm = (event) => {\n        this.setState({algorithm: event.target.value});\n    }\n\n    myChangeHandlerInputName = (event) => {\n        this.setState({input_name: event.target.value});\n    }\n\n    myChangeHandlerOutputName = (event) => {\n        this.setState({output_name: event.target.value});\n    }\n\n    myChangeHandlerTimeFormat = (event) => {\n        this.setState({time_format_type: event.target.value});\n    }\n\n    myChangeHandlerHorizon = (event) => {\n        this.setState({horizon: event.target.value});\n    }\n\n    myChangeHandlerBacktest = (event) => {\n        this.setState({backtest: event.target.value});\n    }\n\n    myChangeHandlerEvaluation = (event) => {\n        this.setState({eval_metric: event.target.value});\n    }\n\n    myChangeHandlerDisplay = (event) => {\n        this.setState({display_metric: event.target.value});\n    }\n\n    myChangeHandlerGPU = (event) => {\n        this.setState({use_gpu: event.target.value});\n    }\n\n    myChangeHandlerThreads = (event) => {\n        this.setState({threads: event.target.value});\n    }\n\n    render() {\n        if (this.state.submitted!==true && this.state.response===false){\n            return (\n                <div>\n                <GlobalStyle/>\n                <form style={configFormStyle} onSubmit={this.handleSubmit} className=\"form\">\n                    <h3 style={{color: \"#26688E\"}}>Configs (all are optional)</h3>\n\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}> Select Algorithm (automl, nbeats, arima, regression)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerAlgorithm} placeholder=\"default: automl\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Input Name</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerInputName} placeholder=\"default: input.csv\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Output Name</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerOutputName} placeholder=\"output name...\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Time Format Type (standard or index)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerTimeFormat} placeholder=\"default: index\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Forecast Horizon (+ horizon desired)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerHorizon} placeholder=\"default: +3\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Backtest Start Time (- desired backtest start)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerBacktest} placeholder=\"default: last 10% of data\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Evaluation Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerEvaluation} placeholder=\"default: wape\" />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label style={{color: \"#36D7B7\"}}>Display Metric (wape,mape,mae,mae%,rmse)</label>\n                        <input style={{backgroundColor: \"#1B1B1B\", borderColor:\"#1B1B1B\", color: '#fff'}} type=\"text\" className=\"form-control\" onChange = {this.myChangeHandlerDisplay} placeholder=\"default: none\" />\n                    </div>\n\n                    <button style={{backgroundColor: \"#26688E\", borderColor: \"#26688E\"}} type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n\n                </form>\n                </div>\n            );\n        }\n        else if (this.state.response===false && this.state.submitted===true){\n            return (\n                //<Spinner animation=\"border\" />\n                <div>\n                    <GlobalStyle/>\n                    <ClimbingBoxLoader color={'#36D7B7'} loading={true} css={override} size={15} />\n                    <strong style={loadTextStyle}>Please wait, as we generate your forecast!</strong>\n                </div>\n            );\n        }\n        else if (this.state.response!==false){\n            return (\n                <>\n                    <GlobalStyle/>\n                    <strong style={loadTextStyle}>Your results are ready!</strong>\n                    <strong style={loadTextStyle2}>Click to download your .csv file with your results</strong>\n                    <Button variant=\"outline-primary\" style={downloadButtonStyle} size='lg' onClick={this.clickDownload}>Download</Button>{' '}\n                </>\n            );\n        }\n    }\n\n};\n","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/test.js",[],"/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/UserMenu.js",["135","136","137","138"],"import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\nimport styled, {createGlobalStyle, css} from 'styled-components';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { makeStyles, ThemeProvider } from \"@material-ui/core\";\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Slide, Fade } from \"react-awesome-reveal\";\n\n\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nconst HoverText = styled.div`\n\t:hover {\n\t\tcursor: pointer;\n\t}\n`\n\n\nconst welcomeStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '50px',\n    color: \"#26688E\"\n};\n\nconst uploadDataButtonStyle = {\n    position: 'absolute',\n    top: '200px',\n    left: '50px',\n    color: \"#26688E\",\n    borderColor: \"#26688E\"\n};\n\nconst getDataStyle = {\n    position: 'absolute',\n    top: '275px',\n    left: '50px',\n    color: \"#36D7B7\",\n};\n\nconst SelectHeaderStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '50px'\n};\n\n\nexport default class UserMenu extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            getDataClicked: false,\n            dataArray: '',\n            leftVar: '50px',\n            leftTrack:50,\n            rows: [],\n            selected: null\n        };\n    }\n\n    handleTableData = (res) => {\n        var rowsArray=[]\n        var counter= 0\n        for (var i in res){\n            rowsArray.push({id: counter, dataName: res[i], dataID: i})\n            counter+=1;\n        }\n\n        console.log(rowsArray);\n        this.setState({rows: rowsArray});\n    }\n\n    componentDidMount() {\n        console.log('Hello World');\n        axios.get(this.props.url + '/getSavedData', {\n            headers: {\n                \"Authorization\": this.props.token\n            }\n        })\n        .then(res => {\n            this.handleTableData(res.data);\n        })\n        .catch(err => console.warn(err))\n    }\n\n    goToUpload = () => {\n        this.props.history.push('fileUpload')\n    };\n\n    dataSelected = (selectedOne) => {\n        this.props.setSelected(selectedOne);\n        this.props.history.push('/selectedSavedData')\n    };\n\n    makeDataButtons = (data) => {\n        return(\n                <Button variant=\"outline-primary\" style={{position: 'absolute', top: '275px', left: data[2], color: \"#26688E\", borderColor: \"#26688E\"}} size='lg' onClick={() => {this.dataSelected(data[0])}}>{data[0]}({data[1]})</Button>\n        );\n    }\n\n    displayData = (inp) => {\n        let leftComp = 50\n        var asArray = []\n        for (var i in inp){\n            asArray.push([i, inp[i], leftComp.toString() + 'px']);\n            leftComp = leftComp+275\n        }\n        console.log(asArray)\n        this.setState({dataArray: asArray, getDataClicked: true})\n    };\n\n    listDatasets = () => {\n        axios.get(this.props.url + '/getSavedData', {\n            headers: {\n                \"Authorization\": this.props.token\n            }\n        })\n        .then(res => {\n            this.displayData(res.data);\n        })\n        .catch(err => console.warn(err))\n    }\n\n    selectOperation = (selection) => {\n        this.setState({selected: parseInt(selection.rowIds[0])})\n        console.log(this.state.selected)\n        console.log(this.state.rows)\n    }\n\n    handleSelectDataClick = () => {\n        this.props.setSelected(this.state.rows[this.state.selected]['dataID']);\n        this.props.history.push('/selectedSavedData');\n    }\n\n    frontendDeleteRow = (res) => {\n        var update = this.state.rows\n        update.splice(this.state.selected, 1)\n        var counter = 0;\n        for(var i=0; i < update.length; i++){\n            update[i].id=counter.toString()\n            counter+=1\n        }\n        this.setState({rows: []});\n        this.setState({rows: update});\n        this.setState({selected: null});\n        //this.forceUpdate();\n    }\n\n    deleteDataRow = () => {\n        axios.delete(this.props.url + '/deleteData', {\n            headers: {\n                \"Authorization\": this.props.token,\n                \"data_id\": this.state.rows[this.state.selected]['dataID']\n            }\n        })\n        .then(res => {\n            this.frontendDeleteRow(res);\n        })\n        .catch(err => console.warn(err))\n    }\n\n    showButton = () => {\n        if(this.state.selected!==null){\n            return (\n                <div>\n                    <button \n                        type=\"submit\" \n                        className=\"btn btn-primary btn-block\"\n                        style={{color: '#000', backgroundColor: \"#36D7B7\", borderColor: \"#36D7B7\", width: '200px', position: 'absolute', top: '665px', left: '555px'}}\n                        onClick={() => {this.handleSelectDataClick()}}\n                    >\n                        Select Data\n                    </button>\n                    <HoverText>\n                    <DeleteIcon style={{position: 'absolute', top: '675px', left: '775px', color: \"#D11A2A\"}} onClick={() => {this.deleteDataRow()}}/>\n                    </HoverText>\n                </div>\n            )\n        }\n    }\n    \n\n    render () {\n\n        const columns = [\n            {field:'id', headerName: 'index', width: 100},\n            {field: 'dataName', headerName: 'Dataset Name', width: 180, description: \"The given name on the dataset\"},\n            {field: 'dataID', headerName: 'Dataset ID', width: 180, description: \"The unique data ID that identifies this dataset as listed in your downloaded results\"}\n        \n        ]\n\n        const darkTheme = createMuiTheme({\n            palette: {\n              type: 'dark',\n            },\n          });\n\n        if (this.state.getDataClicked===false){\n            return (\n                <div>\n                    <GlobalStyle/>\n                    <h1 style={welcomeStyle}>Hello {this.props.username},</h1>\n                    <Button variant=\"btn btn-primary btn-block\" style={{backgroundColor: \"#26688E\", borderColor: \"#26688E\", width: '350px', position: 'absolute', top: '175px', left: '50px'}} size='lg' onClick={this.goToUpload}>Upload New Data</Button>{' '}\n                    <h2 style={getDataStyle}>Work With Previously Saved Data</h2>{' '}\n                    <Fade>\n                    <div style={{ height: 300, width: '40%', position: 'absolute', top: '350px', left: '375px' }}>\n                        <ThemeProvider theme={darkTheme}>\n                        <DataGrid rows={this.state.rows} columns={columns} pageSize={5} disableMultipleSelection={true} onSelectionChange={(newSelection) => {this.selectOperation(newSelection)}} />\n                        </ThemeProvider>\n                    </div>\n                    </Fade>\n                    {this.showButton()}\n                </div>\n            );\n        }\n        else{\n            return (\n                <div>\n                    <GlobalStyle/>\n                    <h1 style={SelectHeaderStyle}>Please select which data you would like to work with!</h1>\n                    {this.state.dataArray.map(this.makeDataButtons, this)}\n                </div>\n            );\n        }\n    }\n}","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/DataSelected.js",["139","140"],"import React, { Component, useState } from 'react';\nimport {useForm} from 'react-hook-form';\nimport axios from 'axios';\nimport { css } from \"@emotion/core\";\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport download from 'downloadjs';\nimport Button from 'react-bootstrap/Button';\nimport styled, {createGlobalStyle} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #1B1B1B;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  position: relative;\n  top: 100px;\n`;\n\nconst loadTextStyle={\n    position: 'relative',\n    top: \"100px\",\n    left: \"525px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst loadTextStyle2={\n    position: 'relative',\n    top: \"150px\",\n    left: \"95px\",\n    //font: \"100000px\"\n    color: \"#36D7B7\"\n};\n\nconst downloadButtonStyle={\n    position: 'relative',\n    top: \"200px\",\n    left: \"-245px\",\n    //font: \"100000px\"\n};\n\nconst formStyle = {\n    position: 'absolute',\n    top: '250px',\n    left: '450px'\n};\n\nconst headerStyle = {\n    position: 'absolute',\n    top: '100px',\n    left: '40px',\n    color: \"#36D7B7\"\n}\n\nconst DataSelected = (props) => {\n\n    const {register, handleSubmit} = useForm()\n\n    const [submitted,updateSubmitted]=useState(false);\n    const [responseGot, updateGot]=useState(false)\n\n    const afterResponse = (res) => {\n        updateGot(res.data);\n        props.fData.delete(\"file\");\n    }\n\n    const onSubmit = (data) => {\n        //const formData = new FormData()\n        updateSubmitted(!submitted);\n        props.fData.append(\"file\", data.csv[0]);\n        axios.post(props.url + '/updateAndPredict', props.fData, {\n            headers: {\n                \"Authorization\": props.token,\n                \"data_id\": props.data_id\n            }\n        })\n        .then(res => {\n            afterResponse(res)\n        })\n        .catch(err => console.warn(err))\n    }\n\n    const clickDownload = () => {\n        download(responseGot, 'result.csv', 'csv')\n    }\n\n    if (submitted===false){\n        return (\n            <div>\n                <GlobalStyle />\n                <h2 style={headerStyle}>Please upload the new data you would like to append to this dataset to get newer forecasts</h2>\n                <form onSubmit={handleSubmit(onSubmit)} style={formStyle} className=\"form\">\n                    <input style={{color: \"#26688E\"}} ref={register} type=\"file\" name=\"csv\" />\n                    <button className=\"btn btn-primary btn-block\" style={{margin: '10px', position: 'relative', left: '0px', top: '20px', backgroundColor: \"#26688E\", borderColor: \"#26688E\"}}>Submit</button>\n                </form>\n            </div>\n        );\n    }\n    else if (submitted===true && responseGot===false){\n        return (\n            <div>\n                <GlobalStyle />\n                <ClimbingBoxLoader color={'#36D7B7'} loading={true} css={override} size={15} />\n                <strong style={loadTextStyle}>Please wait, as we generate your forecast!</strong>\n            </div>\n        );\n    }\n    else{\n        return (\n            <>\n                <GlobalStyle />\n                <strong style={loadTextStyle}>Your results are ready!</strong>\n                <strong style={loadTextStyle2}>Click to download your .csv file with your results</strong>\n                <Button variant=\"outline-primary\" style={downloadButtonStyle} size='lg' onClick={clickDownload}>Download</Button>{' '}\n            </>\n        );\n    }\n\n\n}\n\nexport default DataSelected;","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/Pages/AboutPage.js",["141","142"],"import React, { Component } from 'react';\nimport Typist from 'react-typist';\nimport { Fade, Slide } from \"react-awesome-reveal\";\nimport './AboutPage.css'\nimport Table from 'react-bootstrap/Table';\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nconst GlobalStyle=createGlobalStyle`\n    html {\n        height: 100px;\n    }\n\n    body {\n        font-family: Arial, Helvetica, sans-serif;\n        background: #ECECF5;\n        height: 100%;\n        margin: 0;\n        color: #555;\n    }\n`;\n\n\nconst HeaderStyle = {\n    position: 'relative',\n    top: '50px',\n    left: '50px'\n};\n\nconst test = {\n    position: 'relative',\n    top: '75px',\n    left: '50px'\n};\n\nconst posList={\n    position: 'relative',\n    left: '-50px',\n    top: \"100px\"\n};\n\nconst InputStyle = {\n    position: 'relative',\n    top: \"100px\",\n    left: '50px'\n};\n\nconst InputText = {\n    position: 'relative',\n    top: \"145px\",\n    left: '130px',\n    right: \"80px\"\n};\n\nexport default class AboutPage extends Component {\n    render () {\n        return (\n            <div>\n                <GlobalStyle/>\n                <Typist>\n                    <h1 style={HeaderStyle}>About The API</h1>\n                </Typist>\n\n                <Fade style={test}>\n                    <strong>Introducing a very user friendly way for anyone, engineers and non-engineers alike, to easily upload time series data and get accurate forecasts fast!</strong>\n                </Fade>\n\n                <center>\n                <strong>\n                    <ol class=\"center\" type=\"1\" style={posList}>\n                        <li>Upload Data</li>\n                        <li>Select configurations if desired (or leave blank!)</li>\n                        <li>Wait for your forecasts</li>\n                    </ol>\n                </strong>\n                </center>\n\n                <Slide direction=\"up\">\n                    <h1 style={InputStyle}> Input Data Format</h1>\n                    <p style={InputText}>Data must be given as a .csv file; <b>The first column must be the time column and second column the data column.</b></p>\n                    <h4 style={{position: 'relative', top: '160px', left: \"130px\"}}>Example:</h4>\n\n                    <Table striped bordered hover size=\"sm\" variant=\"dark\" style={{width: \"500px\", position: 'relative', top: \"185px\", left: \"425px\"}}>\n                        <thead>\n                            <tr>\n                                <th>Date</th>\n                                <th>Items Sold</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>1/1/2021</td>\n                                <td>100</td>\n                            </tr>\n                            <tr>\n                                <td>2/1/2021</td>\n                                <td>250</td>\n                            </tr>\n                            <tr>\n                                <td>2/1/2021</td>\n                                <td>400</td>\n                            </tr>\n                            <tr>\n                                <td>2/1/2021</td>\n                                <td>350</td>\n                            </tr>\n                            <tr>\n                                <td>5/1/2021</td>\n                                <td>475</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n\n                    <h1 style={{position: 'relative', top: '260px', left: \"50px\"}}>Configurations</h1>\n                    <p style={{position: \"relative\", top: \"285px\", left: \"130px\", right: \"80px\"}}>All configurations are optional and are set to default values if their fields are not specified. A variety of configurations are offered for you to best suite</p>\n                    <p style={{position: \"relative\", top: \"290px\", left: \"210px\", right: \"80px\"}}>your data forecasting needs!</p>\n                </Slide>\n            </div>\n        );\n    }\n}","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/HomeChart.js",["143"],"import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\n\nexport default class HomeChart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            data: {\n                labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\"],\n                datasets: [\n                    {\n                        label: \"Your Data\",\n                        data: [33, 46, 80, 60, 72, 90],\n                        fill: false,\n                        borderColor: \"rgba(75,192,192,1)\"\n                    },\n                    {\n                        label: \"Forecast\",\n                        data: [, , , , , 90 , 110, 120, 105],\n                        fill: false,\n                        borderColor: \"#fff\"\n                    }\n                ]\n            }\n        };\n    }\n\n    render () {\n        return (\n            <div>\n            <Line data={this.state.data} />\n            </div>\n        );\n    }\n}","/Users/jaypatwardhan/Desktop/TS_API_FrontEnd/ts_api_frontend/src/components/UserMenuButton.js",["144","145","146","147"],"import React, { Component } from 'react';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { createMuiTheme, withStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles';\n\n\nconst buttonStyle = {\n    position: 'absolute',\n    left: '50px',\n    width: '110px',\n    height: '110px',\n    backgroundColor: '#4D4A97',\n    color: '#fff',\n    borderRadius: '10px',\n\n};\n\nexport default class UserMenuButton extends Component {\n    render() {\n        return (\n            <ButtonBase className=\"menubutton\"style={buttonStyle} >Hello</ButtonBase>\n        );\n    }\n}",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":2,"column":8,"nodeType":"154","messageId":"155","endLine":2,"endColumn":14},{"ruleId":"152","severity":1,"message":"156","line":2,"column":36,"nodeType":"154","messageId":"155","endLine":2,"endColumn":39},{"ruleId":"152","severity":1,"message":"157","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":22},{"ruleId":"152","severity":1,"message":"153","line":4,"column":8,"nodeType":"154","messageId":"155","endLine":4,"endColumn":14},{"ruleId":"152","severity":1,"message":"156","line":4,"column":36,"nodeType":"154","messageId":"155","endLine":4,"endColumn":39},{"ruleId":"152","severity":1,"message":"158","line":53,"column":15,"nodeType":"154","messageId":"155","endLine":53,"endColumn":25},{"ruleId":"148","replacedBy":"159"},{"ruleId":"150","replacedBy":"160"},{"ruleId":"152","severity":1,"message":"153","line":4,"column":8,"nodeType":"154","messageId":"155","endLine":4,"endColumn":14},{"ruleId":"152","severity":1,"message":"156","line":4,"column":36,"nodeType":"154","messageId":"155","endLine":4,"endColumn":39},{"ruleId":"152","severity":1,"message":"161","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"153","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":14},{"ruleId":"152","severity":1,"message":"156","line":5,"column":36,"nodeType":"154","messageId":"155","endLine":5,"endColumn":39},{"ruleId":"152","severity":1,"message":"162","line":3,"column":8,"nodeType":"154","messageId":"155","endLine":3,"endColumn":12},{"ruleId":"152","severity":1,"message":"163","line":9,"column":10,"nodeType":"154","messageId":"155","endLine":9,"endColumn":24},{"ruleId":"152","severity":1,"message":"153","line":11,"column":8,"nodeType":"154","messageId":"155","endLine":11,"endColumn":14},{"ruleId":"152","severity":1,"message":"163","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":24},{"ruleId":"152","severity":1,"message":"164","line":2,"column":29,"nodeType":"154","messageId":"155","endLine":2,"endColumn":36},{"ruleId":"152","severity":1,"message":"161","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"165","line":22,"column":7,"nodeType":"154","messageId":"155","endLine":22,"endColumn":18},{"ruleId":"152","severity":1,"message":"166","line":32,"column":7,"nodeType":"154","messageId":"155","endLine":32,"endColumn":23},{"ruleId":"152","severity":1,"message":"167","line":41,"column":7,"nodeType":"154","messageId":"155","endLine":41,"endColumn":17},{"ruleId":"152","severity":1,"message":"168","line":51,"column":7,"nodeType":"154","messageId":"155","endLine":51,"endColumn":19},{"ruleId":"152","severity":1,"message":"169","line":67,"column":7,"nodeType":"154","messageId":"155","endLine":67,"endColumn":18},{"ruleId":"152","severity":1,"message":"170","line":71,"column":7,"nodeType":"154","messageId":"155","endLine":71,"endColumn":21},{"ruleId":"152","severity":1,"message":"171","line":75,"column":7,"nodeType":"154","messageId":"155","endLine":75,"endColumn":21},{"ruleId":"152","severity":1,"message":"172","line":79,"column":7,"nodeType":"154","messageId":"155","endLine":79,"endColumn":18},{"ruleId":"152","severity":1,"message":"173","line":97,"column":7,"nodeType":"154","messageId":"155","endLine":97,"endColumn":16},{"ruleId":"152","severity":1,"message":"162","line":3,"column":8,"nodeType":"154","messageId":"155","endLine":3,"endColumn":12},{"ruleId":"152","severity":1,"message":"163","line":9,"column":10,"nodeType":"154","messageId":"155","endLine":9,"endColumn":24},{"ruleId":"152","severity":1,"message":"153","line":12,"column":8,"nodeType":"154","messageId":"155","endLine":12,"endColumn":14},{"ruleId":"152","severity":1,"message":"156","line":4,"column":36,"nodeType":"154","messageId":"155","endLine":4,"endColumn":39},{"ruleId":"152","severity":1,"message":"174","line":6,"column":10,"nodeType":"154","messageId":"155","endLine":6,"endColumn":20},{"ruleId":"152","severity":1,"message":"175","line":9,"column":10,"nodeType":"154","messageId":"155","endLine":9,"endColumn":15},{"ruleId":"152","severity":1,"message":"176","line":41,"column":7,"nodeType":"154","messageId":"155","endLine":41,"endColumn":28},{"ruleId":"152","severity":1,"message":"177","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":26},{"ruleId":"152","severity":1,"message":"153","line":8,"column":8,"nodeType":"154","messageId":"155","endLine":8,"endColumn":14},{"ruleId":"152","severity":1,"message":"153","line":6,"column":8,"nodeType":"154","messageId":"155","endLine":6,"endColumn":14},{"ruleId":"152","severity":1,"message":"156","line":6,"column":36,"nodeType":"154","messageId":"155","endLine":6,"endColumn":39},{"ruleId":"178","severity":1,"message":"179","line":20,"column":31,"nodeType":"180","messageId":"181","endLine":20,"endColumn":61},{"ruleId":"152","severity":1,"message":"182","line":3,"column":10,"nodeType":"154","messageId":"155","endLine":3,"endColumn":24},{"ruleId":"152","severity":1,"message":"183","line":3,"column":26,"nodeType":"154","messageId":"155","endLine":3,"endColumn":36},{"ruleId":"152","severity":1,"message":"174","line":3,"column":38,"nodeType":"154","messageId":"155","endLine":3,"endColumn":48},{"ruleId":"152","severity":1,"message":"184","line":3,"column":50,"nodeType":"154","messageId":"155","endLine":3,"endColumn":63},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'css' is defined but never used.","'UserMenuButton' is defined but never used.","'jsonSignUp' is assigned a value but never used.",["185"],["186"],"'axios' is defined but never used.","'yaml' is defined but never used.","'CsvToHtmlTable' is defined but never used.","'NavMenu' is defined but never used.","'sharedStyle' is assigned a value but never used.","'StyledFormrapper' is assigned a value but never used.","'StyledForm' is assigned a value but never used.","'StyledButton' is assigned a value but never used.","'StyledInput' is assigned a value but never used.","'StyledTextArea' is assigned a value but never used.","'StyledFieldset' is assigned a value but never used.","'StyledError' is assigned a value but never used.","'textStyle' is assigned a value but never used.","'makeStyles' is defined but never used.","'Slide' is defined but never used.","'uploadDataButtonStyle' is assigned a value but never used.","'Component' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'createMuiTheme' is defined but never used.","'withStyles' is defined but never used.","'ThemeProvider' is defined but never used.","no-global-assign","no-unsafe-negation"]